{"version":3,"sources":["webpack:///webpack/bootstrap fe6a47adeceff1f94e89","webpack:///./src/index.js","webpack:///./src/style.css?bd84","webpack:///./src/style.css","webpack:///./node_modules/css-loader/lib/css-base.js","webpack:///./node_modules/style-loader/lib/addStyles.js","webpack:///./node_modules/style-loader/lib/urls.js","webpack:///./src/board.js","webpack:///./node_modules/web-audio-daw/build/wad.js"],"names":["tone","source","env","attack","decay","sustain","hold","release","window","rawNotes","notes","playList","unitSize","rows","columns","WHITE","BLACK","RED","BLUE","GREEN","interval","running","gameBoard","document","getElementById","width","height","ctx","getContext","board","initBoard","setupListener","setupButtons","drawGame","runSimulation","newBoard","drawGrid","strokeStyle","r","moveTo","lineTo","c","stroke","drawRect","y","x","n","fillStyle","getColor","fillRect","note","length","octave","Math","floor","push","coords","highlightRect","setTimeout","activeCells","getActiveCells","map","pauseSimulation","playNotes","counter","rect","play","pitch","el","currentCell","addEventListener","event","getCell","toggleCell","mouseActivate","mouseDeactivate","removeListeners","removeEventListener","cell","activateCell","deactivateCell","canvas","getBoundingClientRect","clientX","left","clientY","top","toggleSimulation","innerHTML","animate","requestAnimationFrame","tick","clearBoard","clear","randomizeBoard","randomize","Board","starveCount","overpopulateCount","reproduceCount","reduce","result","row","forEach","calculateActiveCells","neighbors","getNeighborCount","startC","middle","bottom","slice","filter","random"],"mappings":"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A4B,GAAG,kBAAkB,gBAAgB,GAAG;;AAEnJ;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD,IAAI;AACJ;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA,YAAY,oBAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,oDAAoD,cAAc;;AAElE;AACA;;;;;;;AC3EA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA,CAAC;;AAED;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,iBAAiB,mBAAmB;AACpC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB,sBAAsB;AACvC;;AAEA;AACA,mBAAmB,2BAA2B;;AAE9C;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,mBAAmB;AACnC;AACA;;AAEA;AACA;;AAEA,iBAAiB,2BAA2B;AAC5C;AACA;;AAEA,QAAQ,uBAAuB;AAC/B;AACA;AACA,GAAG;AACH;;AAEA,iBAAiB,uBAAuB;AACxC;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd,kDAAkD,sBAAsB;AACxE;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA,EAAE;AACF;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD;AACvD;;AAEA,6BAA6B,mBAAmB;;AAEhD;;AAEA;;AAEA;AACA;;;;;;;;AC/VA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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ACA;;AAEA;AACA,0BAA0B,mBAAmB;AAC7C;;AAEA;AACA;AACA,0BAA0B,uBAAuB;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC,WAAW;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wCAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA,6DAA6D;AAC7D;AACA,yDAAyD;AACzD;AACA,yDAAyD;AACzD;AACA,yDAAyD;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,uDAAuD;AACvD;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,+BAA+B,WAAW;AAC1C,8BAA8B,iBAAiB;AAC/C;AACA;AACA;AACA;AACA,iBAAiB;AACjB,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY,0BAA0B,0BAA0B;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA,4BAA4B,mBAAmB;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA,iCAAiC,gBAAgB;AACjD;AACA,wCAAwC,+BAA+B;AACvE,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qBAAqB;AACnC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qBAAqB;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,+BAA+B;AAC3E,qDAAqD,iBAAiB;AACtE,uIAAuI;AACvI;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,0BAA0B;AAChD;AACA;AACA;AACA;AACA,SAAS,yBAAyB,2DAA2D,EAAE,EAAE;AACjG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,0BAA0B;;AAEpE,0CAA0C,8BAA8B;;AAExE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oEAAoE;AACpE,2DAA2D;AAC3D;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,qCAAqC,2DAA2D;AAChG;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA,yCAAyC;AACzC,6CAA6C,iCAAiC;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA,8BAA8B,cAAc;AAC5C,+BAA+B,0BAA0B;AACzD,kBAAkB,kCAAkC;;AAEpD,iCAAiC,2DAA2D;AAC5F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,oDAAoD;AACpD;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gCAAgC,8BAA8B;;AAE9D;AACA;AACA;;;AAGA;;AAEA;;AAEA,sDAAsD,sBAAsB;AAC5E;;AAEA;AACA,iCAAiC,+BAA+B;;AAEhE;AACA,iCAAiC,+BAA+B;AAChE;AACA,6BAA6B,oBAAoB;AACjD;AACA;;AAEA;;;AAGA;AACA;AACA;AACA,qCAAqC,kCAAkC;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iCAAiC;AACjC,iDAAiD;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA,4BAA4B;AAC5B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;;AAEtB,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,uBAAuB;AAC7D;;AAEA,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,qBAAqB,UAAU;AAC/B;AACA;;AAEA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;;AAEA,sEAAsE;AACtE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ,cAAc;AAClE;AACA;AACA;;AAEA,sDAAsD;;AAEtD;AACA,4BAA4B,0BAA0B;;AAEtD,4BAA4B,8BAA8B;;AAE1D;;AAEA;AACA;AACA,+BAA+B,gCAAgC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA,8DAA8D,qBAAqB;AACnF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,2CAA2C;AAC3C;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACbsCAAsC;AACtC;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,kBAAkB;AAClB;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,6CAA6C,oCAAoC;AACjF,gDAAgD,qCAAqC;AACrF;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA,6DAA6D;AAC7D;AACA,qCAAqC;AACrC,wBAAwB,2BAA2B;AACnD,sDAAsD;AACtD;AACA,kCAAkC;AAClC,0CAA0C;AAC1C,2EAA2E;AAC3E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,uBAAuB,0BAA0B,sEAAsE,YAAY,4CAA4C,EAAE;AACjL,iBAAiB,0BAA0B,oEAAoE,YAAY,8CAA8C,EAAE;AAC3K,qBAAqB,0BAA0B,sEAAsE,YAAY,6CAA6C,EAAE;AAChL,iBAAiB,wCAAwC,qEAAqE,YAAY,kDAAkD,gCAAgC,EAAE,aAAa,yCAAyC,EAAE;AACtR,iBAAiB,yCAAyC,sEAAsE,YAAY,qDAAqD,+BAA+B,EAAE;AAClO;AACA;;AAEA,CAAC;;AAED;AACA;AACA;;AAEA;;AAEA,CAAC","file":"main.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/build\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fe6a47adeceff1f94e89","import style from './style.css';\nimport Board from './board.js';\n\nimport Wad from 'web-audio-daw';\n\nconst tone = new Wad({\n  source: 'sine',\n  env: {\n    attack: 0.1,\n    decay: 0,\n    sustain: 1,\n    hold: 0,\n    release: 0.1\n  },\n  // delay: {\n  //   delayTime: 0.5,\n  //   feedback: 0.1,\n  //   wet: 0.1\n  // }\n});\n\nwindow.tone = tone;\n\nconst rawNotes = ['C', 'D', 'F', 'G', 'A'];\n// ['C4','D4','F4','G4','A4','C5','D5','F5','G5','A5','C6','D6','F6','G6','A6','C7']\nconst notes = [];\nlet playList = {};\n\nconst unitSize = 40;\nconst rows = 16;\nconst columns = 16;\nconst WHITE = '#FFF';\nconst BLACK = '#000';\nconst RED = '#cc3a2f';\nconst BLUE = '#3f51b5';\nconst GREEN = '#4fb153';\n\nlet interval;\nlet running = false;\n\nconst gameBoard = document.getElementById('gameBoard');\ngameBoard.width = columns*unitSize+1;\ngameBoard.height = rows*unitSize+1;\nconst ctx = gameBoard.getContext('2d');\n// ctx.translate(0.5, 0.5);\n\n\nlet board = initBoard(rows, columns);\nsetupListener(gameBoard);\nsetupButtons();\ndrawGame(board);\nrunSimulation();\n\n\nfunction initBoard(rows, columns) {\n  const newBoard = new Board(rows, columns);\n  return newBoard;\n}\n\nfunction drawGrid() {\n  ctx.strokeStyle = BLACK;\n  for (let r=0; r<=rows; r++) {\n    ctx.moveTo(0, r*unitSize);\n    ctx.lineTo(columns*unitSize, r*unitSize);\n  }\n  for (let c=0; c<=columns; c++) {\n    ctx.moveTo(c*unitSize, 0);\n    ctx.lineTo(c*unitSize, rows*unitSize);\n  }\n  ctx.stroke();\n}\n\nfunction drawRect([y, x, n]) {\n  ctx.fillStyle = getColor(n);\n  ctx.fillRect(x*unitSize, y*unitSize, unitSize, unitSize);\n  // const note = rawNotes[Math.floor(Math.random() * rawNotes.length)];\n  const note = rawNotes[(rows - y) % rawNotes.length];\n  const octave = Math.floor((rows - y) / rawNotes.length) + 4;\n  if (!playList[x]) {\n    playList[x] = [];\n  }\n  playList[x].push({\n    note: note + octave,\n    coords: [y, x, n]\n  });\n}\n\nfunction highlightRect([y, x, n]) {\n  ctx.fillStyle = BLACK;\n  ctx.fillRect(x*unitSize, y*unitSize, unitSize, unitSize);\n  setTimeout(() => {\n    ctx.fillStyle = getColor(n);\n    ctx.fillRect(x*unitSize, y*unitSize, unitSize, unitSize);\n  }, 100);\n}\n\nfunction drawGame(board) {\n  playList = {};\n  ctx.fillStyle = WHITE;\n  ctx.fillRect(0, 0, columns*unitSize, rows*unitSize);\n  // drawGrid();\n  const activeCells = board.getActiveCells()\n  activeCells.map(drawRect);\n  if (activeCells.length === 0) {\n    pauseSimulation();\n  }\n}\n\nfunction playNotes(counter) {\n  if (playList[counter]) {\n    playList[counter].map(rect => {\n      highlightRect(rect.coords);\n      tone.play({\n        pitch: rect.note\n      });\n    });\n  }\n}\n\nfunction setupListener(el) {\n  let currentCell;\n  let running = false;\n  el.addEventListener('mousedown', (event) => {\n    // running = !!interval;\n    // if (running) {\n    //   console.log('Drawing new cells');\n    //   pauseSimulation();\n    // }\n    currentCell = getCell(el, event);\n    board.toggleCell(...currentCell);\n    drawGame(board);\n    if (board.getCell(...currentCell)) {\n      el.addEventListener('mousemove', mouseActivate);\n    } else {\n      el.addEventListener('mousemove', mouseDeactivate);\n    }\n  });\n  el.addEventListener('mouseup', removeListeners);\n  el.addEventListener('mouseout', removeListeners);\n\n  function removeListeners() {\n    // if (running) {\n    //   runSimulation();\n    // }\n    el.removeEventListener('mousemove', mouseActivate);\n    el.removeEventListener('mousemove', mouseDeactivate);\n  }\n\n  function mouseActivate(event) {\n    const cell = getCell(el, event);\n    if (cell[0] !== currentCell[0] || cell[1] !== currentCell[1]) {\n      currentCell = cell;\n      board.activateCell(...cell);\n      drawGame(board);\n    }\n  }\n\n  function mouseDeactivate(event) {\n    const cell = getCell(el, event);\n    if (cell[0] !== currentCell[0] || cell[1] !== currentCell[1]) {\n      currentCell = cell;\n      board.deactivateCell(...cell);\n      drawGame(board);\n    }\n  }\n}\n\n\nfunction getCell(canvas, event) {\n  var rect = canvas.getBoundingClientRect();\n  var x = event.clientX - rect.left;\n  var y = event.clientY - rect.top;\n  return [Math.floor(y/unitSize), Math.floor(x/unitSize)];\n}\n\nfunction toggleSimulation() {\n  if (running) {\n    pauseSimulation();\n  } else {\n    // runSimulation();\n    running = true;\n    document.getElementById('play').innerHTML = 'Pause';\n  }\n}\n\nfunction runSimulation() {\n  running = true;\n  let counter = 0;\n  function animate() {\n    // console.timeEnd('Frame');\n    // console.time('Frame');\n    setTimeout(() => {\n      if (interval) {\n        interval = requestAnimationFrame(animate);\n      }\n    }, 100);\n    if (counter % columns === 0){\n      counter = 0;\n      if (running) {\n        board.tick();\n        drawGame(board);\n      }\n    }\n    playNotes(counter++);\n  }\n  interval = requestAnimationFrame(animate);\n  // document.getElementById('play').innerHTML = 'Pause';\n}\n\nfunction pauseSimulation() {\n  document.getElementById('play').innerHTML = 'Play';\n  // cancelAnimationFrame(interval);\n  // interval = null;\n  running = false;\n}\n\nfunction clearBoard() {\n  board.clear();\n  drawGame(board);\n}\n\nfunction randomizeBoard() {\n  board.randomize();\n  drawGame(board);\n}\n\nfunction setupButtons() {\n  document.getElementById('play').addEventListener('click', toggleSimulation);\n  document.getElementById('clear').addEventListener('click', clearBoard);\n  document.getElementById('randomize').addEventListener('click', randomizeBoard);\n}\n\nfunction getColor(n) {\n  if (n === 1) {\n    return RED;\n  } else if (n === 2) {\n    return GREEN;\n  } else {\n    return BLUE;\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/css-loader/index.js!./style.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../node_modules/css-loader/index.js!./style.css\", function() {\n\t\t\tvar newContent = require(\"!!../node_modules/css-loader/index.js!./style.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/style.css\n// module id = 1\n// module chunks = 0","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"html {\\n  user-select: none;\\n}\\n\\ncanvas#gameBoard {\\n  border: 1px solid black;\\n}\\n\\ndiv.controls {\\n  clear: both;\\n}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./src/style.css\n// module id = 2\n// module chunks = 0","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader/lib/css-base.js\n// module id = 3\n// module chunks = 0","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(selector) {\n\t\tif (typeof memo[selector] === \"undefined\") {\n\t\t\tmemo[selector] = fn.call(this, selector);\n\t\t}\n\n\t\treturn memo[selector]\n\t};\n})(function (target) {\n\treturn document.querySelector(target)\n});\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = require(\"./urls\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton) options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n\tif (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else {\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\toptions.attrs.type = \"text/css\";\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\toptions.attrs.type = \"text/css\";\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/style-loader/lib/addStyles.js\n// module id = 4\n// module chunks = 0","\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/style-loader/lib/urls.js\n// module id = 5\n// module chunks = 0","export default class Board {\n  constructor(rows, columns) {\n    this.starveCount = 2;\n    this.overpopulateCount = 3;\n    this.reproduceCount = 3;\n    this.board = [];\n    this.activeCells = [];\n    for (let r=0; r<rows; r++) {\n      this.board[r] = [];\n      for (let c=0; c<columns; c++) {\n        this.board[r][c] = false;\n      }\n    }\n  }\n\n  getCell(r, c) {\n    if (this.board[r]){\n      return this.board[r][c];\n    }\n    return false;\n  }\n\n  calculateActiveCells() {\n    this.activeCells = this.board.reduce((result, row, r) => {\n      row.forEach((cell, c) => {\n        if (cell) {\n          result.push([r, c, cell]);\n        }\n      });\n      return result;\n    }, []);\n    return this.activeCells;\n  }\n\n  getActiveCells() {\n    // if (!this.activeCells) {\n      this.calculateActiveCells();\n    // }\n    return this.activeCells;\n  }\n\n  tick() {\n    // this.board = this.board.map((row, r) => {\n    //   return row.map((cell, c) => {\n    //     const neighbors = this.getNeighborCount(r, c);\n    //     if (neighbors < this.starveCount) return false;\n    //     if (neighbors > this.overpopulateCount) return false;\n    //     if (neighbors === this.reproduceCount) return true;\n    //     return cell;\n    //   });\n    // });\n    const newBoard = [];\n    for (let r = 0; r < this.board.length; r++) {\n      newBoard[r] = [];\n      for (let c = 0; c < this.board[r].length; c++) {\n        const neighbors = this.getNeighborCount(r, c);\n        if (neighbors < this.starveCount) {\n          newBoard[r][c] = false;\n        } else if (neighbors > this.overpopulateCount) {\n          newBoard[r][c] = false;\n        } else if (neighbors === this.reproduceCount) {\n          newBoard[r][c] = this.board[r][c] + 1;\n        } else {\n          newBoard[r][c] = this.board[r][c];\n        }\n      }\n    }\n    this.board = newBoard;\n  }\n\n  getNeighborCount(r, c) {\n    const startC = c <= 0 ? 0 : c-1;\n    const top = this.board[r-1];\n    const middle = this.board[r];\n    const bottom = this.board[r+1];\n    let neighbors = [middle[c-1], middle[c+1]];\n    if (top) {\n      neighbors = [...neighbors, ...top.slice(startC,c+2)];\n    }\n    if (bottom) {\n      neighbors = [...neighbors, ...bottom.slice(startC,c+2)];\n    }\n    return neighbors.filter(n => n).length;\n  }\n\n  toggleCell(r, c) {\n    this.board[r][c] = !this.board[r][c];\n  }\n\n  activateCell(r, c) {\n    this.board[r][c] = 1;\n  }\n\n  deactivateCell(r, c) {\n    this.board[r][c] = false;\n  }\n\n  clear() {\n    this.board = this.board.map(row => {\n      return row.map(cell => false);\n    });\n    this.activeCells = [];\n  }\n\n  randomize() {\n    this.board = this.board.map(row => {\n      return row.map(cell => Math.random() > 0.5 ? 1 : false);\n    });\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/board.js","(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    define([], function () {\n      return (root['Wad'] = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['Wad'] = factory();\n  }\n}(this, function () {\n\n(function(window){\n\n  var WORKER_PATH = 'recorderWorker.js';\n\n  var Recorder = function(source, cfg){\n    var config = cfg || {};\n    var bufferLen = config.bufferLen || 4096;\n    var numChannels = config.numChannels || 2;\n    this.context = source.context;\n    this.node = (this.context.createScriptProcessor ||\n                 this.context.createJavaScriptNode).call(this.context,\n                 bufferLen, numChannels, numChannels);\n    var worker = new Worker(config.workerPath || WORKER_PATH);\n    worker.postMessage({\n      command: 'init',\n      config: {\n        sampleRate: this.context.sampleRate,\n        numChannels: numChannels\n      }\n    });\n    var recording = false,\n      currCallback;\n\n    this.node.onaudioprocess = function(e){\n      if (!recording) return;\n      var buffer = [];\n      for (var channel = 0; channel < numChannels; channel++){\n          buffer.push(e.inputBuffer.getChannelData(channel));\n      }\n      worker.postMessage({\n        command: 'record',\n        buffer: buffer\n      });\n    }\n\n    this.configure = function(cfg){\n      for (var prop in cfg){\n        if (cfg.hasOwnProperty(prop)){\n          config[prop] = cfg[prop];\n        }\n      }\n    }\n\n    this.record = function(){\n      recording = true;\n    }\n\n    this.stop = function(){\n      recording = false;\n    }\n\n    this.clear = function(){\n      worker.postMessage({ command: 'clear' });\n    }\n\n    this.getBuffer = function(cb) {\n      currCallback = cb || config.callback;\n      worker.postMessage({ command: 'getBuffer' })\n    }\n\n    this.exportWAV = function(cb, type){\n      currCallback = cb || config.callback;\n      type = type || config.type || 'audio/wav';\n      if (!currCallback) throw new Error('Callback not set');\n      worker.postMessage({\n        command: 'exportWAV',\n        type: type\n      });\n    }\n\n    worker.onmessage = function(e){\n      var blob = e.data;\n      currCallback(blob);\n    }\n\n    source.connect(this.node);\n    this.node.connect(this.context.destination);    //this should not be necessary\n  };\n\n  Recorder.forceDownload = function(blob, filename){\n    var url = (window.URL || window.webkitURL).createObjectURL(blob);\n    var link = window.document.createElement('a');\n    link.href = url;\n    link.download = filename || 'output.wav';\n    var click = document.createEvent(\"Event\");\n    click.initEvent(\"click\", true, true);\n    link.dispatchEvent(click);\n  }\n\n  window.Recorder = Recorder;\n\n})(window);;/*\n    Copyright (c) 2012 DinahMoe AB & Oskar Eriksson\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\n    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\n    is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n(function(window) {\n    var userContext,\n        userInstance,\n        pipe = function(param, val) {\n            param.value = val;\n        },\n        Super = Object.create(null, {\n            activate: {\n                writable: true,\n                value: function(doActivate) {\n                    if (doActivate) {\n                        this.input.disconnect();\n                        this.input.connect(this.activateNode);\n                        if (this.activateCallback) {\n                            this.activateCallback(doActivate);\n                        }\n                    } else {\n                        this.input.disconnect();\n                        this.input.connect(this.output);\n                    }\n                }\n            },\n            bypass: {\n                get: function() {\n                    return this._bypass;\n                },\n                set: function(value) {\n                    if (this._lastBypassValue === value) {\n                        return;\n                    }\n                    this._bypass = value;\n                    this.activate(!value);\n                    this._lastBypassValue = value;\n                }\n            },\n            connect: {\n                value: function(target) {\n                    this.output.connect(target);\n                }\n            },\n            disconnect: {\n                value: function(target) {\n                    this.output.disconnect(target);\n                }\n            },\n            connectInOrder: {\n                value: function(nodeArray) {\n                    var i = nodeArray.length - 1;\n                    while (i--) {\n                        if (!nodeArray[i].connect) {\n                            return console.error(\"AudioNode.connectInOrder: TypeError: Not an AudioNode.\", nodeArray[i]);\n                        }\n                        if (nodeArray[i + 1].input) {\n                            nodeArray[i].connect(nodeArray[i + 1].input);\n                        } else {\n                            nodeArray[i].connect(nodeArray[i + 1]);\n                        }\n                    }\n                }\n            },\n            getDefaults: {\n                value: function() {\n                    var result = {};\n                    for (var key in this.defaults) {\n                        result[key] = this.defaults[key].value;\n                    }\n                    return result;\n                }\n            },\n            automate: {\n                value: function(property, value, duration, startTime) {\n                    var start = startTime ? ~~(startTime / 1000) : userContext.currentTime,\n                        dur = duration ? ~~(duration / 1000) : 0,\n                        _is = this.defaults[property],\n                        param = this[property],\n                        method;\n\n                    if (param) {\n                        if (_is.automatable) {\n                            if (!duration) {\n                                method = \"setValueAtTime\";\n                            } else {\n                                method = \"linearRampToValueAtTime\";\n                                param.cancelScheduledValues(start);\n                                param.setValueAtTime(param.value, start);\n                            }\n                            param[method](value, dur + start);\n                        } else {\n                            param = value;\n                        }\n                    } else {\n                        console.error(\"Invalid Property for \" + this.name);\n                    }\n                }\n            }\n        }),\n        FLOAT = \"float\",\n        BOOLEAN = \"boolean\",\n        STRING = \"string\",\n        INT = \"int\";\n\n    if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = Tuna;\n    } else if (typeof define === \"function\") {\n        window.define(\"Tuna\", definition);\n    } else {\n        window.Tuna = Tuna;\n    }\n\n    function definition() {\n        return Tuna;\n    }\n\n    function Tuna(context) {\n        if (!(this instanceof Tuna)) {\n            return new Tuna(context);\n        }\n        if (!window.AudioContext) {\n            window.AudioContext = window.webkitAudioContext;\n        }\n        if (!context) {\n            console.log(\"tuna.js: Missing audio context! Creating a new context for you.\");\n            context = window.AudioContext && (new window.AudioContext());\n        }\n        if (!context) {\n            throw new Error(\"Tuna cannot initialize because this environment does not support web audio.\");\n        }\n        connectify(context);\n        userContext = context;\n        userInstance = this;\n    }\n\n    function connectify(context) {\n        if (context.__connectified__ === true) return;\n\n        var gain = context.createGain(),\n            proto = Object.getPrototypeOf(Object.getPrototypeOf(gain)),\n            oconnect = proto.connect;\n\n        proto.connect = shimConnect;\n        context.__connectified__ = true; // Prevent overriding connect more than once\n\n        function shimConnect() {\n            var node = Array.prototype.shift.apply(arguments);\n            node = Super.isPrototypeOf ? (Super.isPrototypeOf(node) ? node.input : node) : (node.input || node);\n            arguments = Array.prototype.slice.call(arguments);\n            arguments.unshift(node);\n            oconnect.apply(this, arguments);\n            return node;\n        }\n    }\n\n    function dbToWAVolume(db) {\n        return Math.max(0, Math.round(100 * Math.pow(2, db / 6)) / 100);\n    }\n\n    function fmod(x, y) {\n        // http://kevin.vanzonneveld.net\n        // *     example 1: fmod(5.7, 1.3);\n        // *     returns 1: 0.5\n        var tmp, tmp2, p = 0,\n            pY = 0,\n            l = 0.0,\n            l2 = 0.0;\n\n        tmp = x.toExponential().match(/^.\\.?(.*)e(.+)$/);\n        p = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n        tmp = y.toExponential().match(/^.\\.?(.*)e(.+)$/);\n        pY = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n\n        if (pY > p) {\n            p = pY;\n        }\n\n        tmp2 = (x % y);\n\n        if (p < -100 || p > 20) {\n            // toFixed will give an out of bound error so we fix it like this:\n            l = Math.round(Math.log(tmp2) / Math.log(10));\n            l2 = Math.pow(10, l);\n\n            return (tmp2 / l2).toFixed(l - p) * l2;\n        } else {\n            return parseFloat(tmp2.toFixed(-p));\n        }\n    }\n\n    function sign(x) {\n        if (x === 0) {\n            return 1;\n        } else {\n            return Math.abs(x) / x;\n        }\n    }\n\n    function tanh(n) {\n        return (Math.exp(n) - Math.exp(-n)) / (Math.exp(n) + Math.exp(-n));\n    }\n\n    function initValue(userVal, defaultVal) {\n        return userVal === undefined ? defaultVal : userVal;\n    }\n\n    Tuna.prototype.Bitcrusher = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\n\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.processor);\n        this.processor.connect(this.output);\n\n        var phaser = 0,\n            last = 0,\n            input, output, step, i, length;\n        this.processor.onaudioprocess = function(e) {\n            input = e.inputBuffer.getChannelData(0),\n            output = e.outputBuffer.getChannelData(0),\n            step = Math.pow(1 / 2, this.bits);\n            length = input.length;\n            for (i = 0; i < length; i++) {\n                phaser += this.normfreq;\n                if (phaser >= 1.0) {\n                    phaser -= 1.0;\n                    last = step * Math.floor(input[i] / step + 0.5);\n                }\n                output[i] = last;\n            }\n        };\n\n        this.bits = properties.bits || this.defaults.bits.value;\n        this.normfreq = initValue(properties.normfreq, this.defaults.normfreq.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Bitcrusher.prototype = Object.create(Super, {\n        name: {\n            value: \"Bitcrusher\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                bits: {\n                    value: 4,\n                    min: 1,\n                    max: 16,\n                    automatable: false,\n                    type: INT\n                },\n                bufferSize: {\n                    value: 4096,\n                    min: 256,\n                    max: 16384,\n                    automatable: false,\n                    type: INT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                normfreq: {\n                    value: 0.1,\n                    min: 0.0001,\n                    max: 1.0,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        bits: {\n            enumerable: true,\n            get: function() {\n                return this.processor.bits;\n            },\n            set: function(value) {\n                this.processor.bits = value;\n            }\n        },\n        normfreq: {\n            enumerable: true,\n            get: function() {\n                return this.processor.normfreq;\n            },\n            set: function(value) {\n                this.processor.normfreq = value;\n            }\n        }\n    });\n\n    Tuna.prototype.Cabinet = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.convolver = this.newConvolver(properties.impulsePath ||\n            \"../impulses/impulse_guitar.wav\");\n        this.makeupNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.convolver.input);\n        this.convolver.output.connect(this.makeupNode);\n        this.makeupNode.connect(this.output);\n\n        this.makeupGain = initValue(properties.makeupGain, this.defaults\n            .makeupGain);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Cabinet.prototype = Object.create(Super, {\n        name: {\n            value: \"Cabinet\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                makeupGain: {\n                    value: 1,\n                    min: 0,\n                    max: 20,\n                    automatable: true,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        makeupGain: {\n            enumerable: true,\n            get: function() {\n                return this.makeupNode.gain;\n            },\n            set: function(value) {\n                this.makeupNode.gain.value = value;\n            }\n        },\n        newConvolver: {\n            value: function(impulsePath) {\n                return new userInstance.Convolver({\n                    impulse: impulsePath,\n                    dryLevel: 0,\n                    wetLevel: 1\n                });\n            }\n        }\n    });\n\n    Tuna.prototype.Chorus = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.attenuator = this.activateNode = userContext.createGain();\n        this.splitter = userContext.createChannelSplitter(2);\n        this.delayL = userContext.createDelay();\n        this.delayR = userContext.createDelay();\n        this.feedbackGainNodeLR = userContext.createGain();\n        this.feedbackGainNodeRL = userContext.createGain();\n        this.merger = userContext.createChannelMerger(2);\n        this.output = userContext.createGain();\n\n        this.lfoL = new userInstance.LFO({\n            target: this.delayL.delayTime,\n            callback: pipe\n        });\n        this.lfoR = new userInstance.LFO({\n            target: this.delayR.delayTime,\n            callback: pipe\n        });\n\n        this.input.connect(this.attenuator);\n        this.attenuator.connect(this.output);\n        this.attenuator.connect(this.splitter);\n        this.splitter.connect(this.delayL, 0);\n        this.splitter.connect(this.delayR, 1);\n        this.delayL.connect(this.feedbackGainNodeLR);\n        this.delayR.connect(this.feedbackGainNodeRL);\n        this.feedbackGainNodeLR.connect(this.delayR);\n        this.feedbackGainNodeRL.connect(this.delayL);\n        this.delayL.connect(this.merger, 0, 0);\n        this.delayR.connect(this.merger, 0, 1);\n        this.merger.connect(this.output);\n\n        this.feedback = initValue(properties.feedback, this.defaults.feedback\n            .value);\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\n        this.delay = initValue(properties.delay, this.defaults.delay.value);\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\n        this.lfoR.phase = Math.PI / 2;\n        this.attenuator.gain.value = 0.6934; // 1 / (10 ^ (((20 * log10(3)) / 3) / 20))\n        this.lfoL.activate(true);\n        this.lfoR.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Chorus.prototype = Object.create(Super, {\n        name: {\n            value: \"Chorus\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                feedback: {\n                    value: 0.4,\n                    min: 0,\n                    max: 0.95,\n                    automatable: false,\n                    type: FLOAT\n                },\n                delay: {\n                    value: 0.0045,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                depth: {\n                    value: 0.7,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                rate: {\n                    value: 1.5,\n                    min: 0,\n                    max: 8,\n                    automatable: false,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        delay: {\n            enumerable: true,\n            get: function() {\n                return this._delay;\n            },\n            set: function(value) {\n                this._delay = 0.0002 * (Math.pow(10, value) * 2);\n                this.lfoL.offset = this._delay;\n                this.lfoR.offset = this._delay;\n                this._depth = this._depth;\n            }\n        },\n        depth: {\n            enumerable: true,\n            get: function() {\n                return this._depth;\n            },\n            set: function(value) {\n                this._depth = value;\n                this.lfoL.oscillation = this._depth * this._delay;\n                this.lfoR.oscillation = this._depth * this._delay;\n            }\n        },\n        feedback: {\n            enumerable: true,\n            get: function() {\n                return this._feedback;\n            },\n            set: function(value) {\n                this._feedback = value;\n                this.feedbackGainNodeLR.gain.value = this._feedback;\n                this.feedbackGainNodeRL.gain.value = this._feedback;\n            }\n        },\n        rate: {\n            enumerable: true,\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._rate = value;\n                this.lfoL.frequency = this._rate;\n                this.lfoR.frequency = this._rate;\n            }\n        }\n    });\n\n    Tuna.prototype.Compressor = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.compNode = this.activateNode = userContext.createDynamicsCompressor();\n        this.makeupNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.compNode.connect(this.makeupNode);\n        this.makeupNode.connect(this.output);\n\n        this.automakeup = initValue(properties.automakeup, this.defaults\n            .automakeup\n            .value);\n        this.makeupGain = properties.makeupGain || this.defaults.makeupGain\n            .value;\n        this.threshold = initValue(properties.threshold, this.defaults.threshold\n            .value);\n        this.release = properties.release || this.defaults.release.value;\n        this.attack = initValue(properties.attack, this.defaults.attack\n            .value);\n        this.ratio = properties.ratio || this.defaults.ratio.value;\n        this.knee = initValue(properties.knee, this.defaults.knee.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Compressor.prototype = Object.create(Super, {\n        name: {\n            value: \"Compressor\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                threshold: {\n                    value: -20,\n                    min: -60,\n                    max: 0,\n                    automatable: true,\n                    type: FLOAT\n                },\n                release: {\n                    value: 250,\n                    min: 10,\n                    max: 2000,\n                    automatable: true,\n                    type: FLOAT\n                },\n                makeupGain: {\n                    value: 1,\n                    min: 1,\n                    max: 100,\n                    automatable: true,\n                    type: FLOAT\n                },\n                attack: {\n                    value: 1,\n                    min: 0,\n                    max: 1000,\n                    automatable: true,\n                    type: FLOAT\n                },\n                ratio: {\n                    value: 4,\n                    min: 1,\n                    max: 50,\n                    automatable: true,\n                    type: FLOAT\n                },\n                knee: {\n                    value: 5,\n                    min: 0,\n                    max: 40,\n                    automatable: true,\n                    type: FLOAT\n                },\n                automakeup: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        computeMakeup: {\n            value: function() {\n                var magicCoefficient = 4,\n                    // raise me if the output is too hot\n                    c = this.compNode;\n                return -(c.threshold.value - c.threshold.value /\n                        c.ratio.value) /\n                    magicCoefficient;\n            }\n        },\n        automakeup: {\n            enumerable: true,\n            get: function() {\n                return this._automakeup;\n            },\n            set: function(value) {\n                this._automakeup = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        threshold: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.threshold;\n            },\n            set: function(value) {\n                this.compNode.threshold.value = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        ratio: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.ratio;\n            },\n            set: function(value) {\n                this.compNode.ratio.value = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        knee: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.knee;\n            },\n            set: function(value) {\n                this.compNode.knee.value = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        attack: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.attack;\n            },\n            set: function(value) {\n                this.compNode.attack.value = value / 1000;\n            }\n        },\n        release: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.release;\n            },\n            set: function(value) {\n                this.compNode.release = value / 1000;\n            }\n        },\n        makeupGain: {\n            enumerable: true,\n            get: function() {\n                return this.makeupNode.gain;\n            },\n            set: function(value) {\n                this.makeupNode.gain.value = dbToWAVolume(value);\n            }\n        }\n    });\n\n    Tuna.prototype.Convolver = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.convolver = userContext.createConvolver();\n        this.dry = userContext.createGain();\n        this.filterLow = userContext.createBiquadFilter();\n        this.filterHigh = userContext.createBiquadFilter();\n        this.wet = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.filterLow);\n        this.activateNode.connect(this.dry);\n        this.filterLow.connect(this.filterHigh);\n        this.filterHigh.connect(this.convolver);\n        this.convolver.connect(this.wet);\n        this.wet.connect(this.output);\n        this.dry.connect(this.output);\n\n        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel\n            .value);\n        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel\n            .value);\n        this.highCut = properties.highCut || this.defaults.highCut.value;\n        this.buffer = properties.impulse ||\n            \"../impulses/ir_rev_short.wav\";\n        this.lowCut = properties.lowCut || this.defaults.lowCut.value;\n        this.level = initValue(properties.level, this.defaults.level.value);\n        this.filterHigh.type = \"lowpass\";\n        this.filterLow.type = \"highpass\";\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Convolver.prototype = Object.create(Super, {\n        name: {\n            value: \"Convolver\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                highCut: {\n                    value: 22050,\n                    min: 20,\n                    max: 22050,\n                    automatable: true,\n                    type: FLOAT\n                },\n                lowCut: {\n                    value: 20,\n                    min: 20,\n                    max: 22050,\n                    automatable: true,\n                    type: FLOAT\n                },\n                dryLevel: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                wetLevel: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                level: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                }\n            }\n        },\n        lowCut: {\n            get: function() {\n                return this.filterLow.frequency;\n            },\n            set: function(value) {\n                this.filterLow.frequency.value = value;\n            }\n        },\n        highCut: {\n            get: function() {\n                return this.filterHigh.frequency;\n            },\n            set: function(value) {\n                this.filterHigh.frequency.value = value;\n            }\n        },\n        level: {\n            get: function() {\n                return this.output.gain;\n            },\n            set: function(value) {\n                this.output.gain.value = value;\n            }\n        },\n        dryLevel: {\n            get: function() {\n                return this.dry.gain\n            },\n            set: function(value) {\n                this.dry.gain.value = value;\n            }\n        },\n        wetLevel: {\n            get: function() {\n                return this.wet.gain;\n            },\n            set: function(value) {\n                this.wet.gain.value = value;\n            }\n        },\n        buffer: {\n            enumerable: false,\n            get: function() {\n                return this.convolver.buffer;\n            },\n            set: function(impulse) {\n                var convolver = this.convolver,\n                    xhr = new XMLHttpRequest();\n                if (!impulse) {\n                    console.log(\"Tuna.Convolver.setBuffer: Missing impulse path!\");\n                    return;\n                }\n                xhr.open(\"GET\", impulse, true);\n                xhr.responseType = \"arraybuffer\";\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState === 4) {\n                        if (xhr.status < 300 && xhr.status > 199 || xhr.status === 302) {\n                            userContext.decodeAudioData(xhr.response, function(buffer) {\n                                convolver.buffer = buffer;\n                            }, function(e) {\n                                if (e) console.log(\"Tuna.Convolver.setBuffer: Error decoding data\" + e);\n                            });\n                        }\n                    }\n                };\n                xhr.send(null);\n            }\n        }\n    });\n\n    Tuna.prototype.Delay = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.dry = userContext.createGain();\n        this.wet = userContext.createGain();\n        this.filter = userContext.createBiquadFilter();\n        this.delay = userContext.createDelay();\n        this.feedbackNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.delay);\n        this.activateNode.connect(this.dry);\n        this.delay.connect(this.filter);\n        this.filter.connect(this.feedbackNode);\n        this.feedbackNode.connect(this.delay);\n        this.feedbackNode.connect(this.wet);\n        this.wet.connect(this.output);\n        this.dry.connect(this.output);\n\n        this.delayTime = properties.delayTime || this.defaults.delayTime.value;\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel.value);\n        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel.value);\n        this.cutoff = properties.cutoff || this.defaults.cutoff.value;\n        this.filter.type = \"lowpass\";\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Delay.prototype = Object.create(Super, {\n        name: {\n            value: \"Delay\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                delayTime: {\n                    value: 100,\n                    min: 20,\n                    max: 1000,\n                    automatable: false,\n                    type: FLOAT\n                },\n                feedback: {\n                    value: 0.45,\n                    min: 0,\n                    max: 0.9,\n                    automatable: true,\n                    type: FLOAT\n                },\n                cutoff: {\n                    value: 20000,\n                    min: 20,\n                    max: 20000,\n                    automatable: true,\n                    type: FLOAT\n                },\n                wetLevel: {\n                    value: 0.5,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                dryLevel: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                }\n            }\n        },\n        delayTime: {\n            enumerable: true,\n            get: function() {\n                return this.delay.delayTime;\n            },\n            set: function(value) {\n                this.delay.delayTime.value = value / 1000;\n            }\n        },\n        wetLevel: {\n            enumerable: true,\n            get: function() {\n                return this.wet.gain;\n            },\n            set: function(value) {\n                this.wet.gain.value = value;\n            }\n        },\n        dryLevel: {\n            enumerable: true,\n            get: function() {\n                return this.dry.gain;\n            },\n            set: function(value) {\n                this.dry.gain.value = value;\n            }\n        },\n        feedback: {\n            enumerable: true,\n            get: function() {\n                return this.feedbackNode.gain;\n            },\n            set: function(value) {\n                this.feedbackNode.gain.value = value;\n            }\n        },\n        cutoff: {\n            enumerable: true,\n            get: function() {\n                return this.filter.frequency;\n            },\n            set: function(value) {\n                this.filter.frequency.value = value;\n            }\n        }\n    });\n\n    Tuna.prototype.Filter = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.filter = userContext.createBiquadFilter();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.filter);\n        this.filter.connect(this.output);\n\n        this.frequency = properties.frequency || this.defaults.frequency\n            .value;\n        this.Q = properties.resonance || this.defaults.Q.value;\n        this.filterType = initValue(properties.filterType, this.defaults\n            .filterType\n            .value);\n        this.gain = initValue(properties.gain, this.defaults.gain.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Filter.prototype = Object.create(Super, {\n        name: {\n            value: \"Filter\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                frequency: {\n                    value: 800,\n                    min: 20,\n                    max: 22050,\n                    automatable: true,\n                    type: FLOAT\n                },\n                Q: {\n                    value: 1,\n                    min: 0.001,\n                    max: 100,\n                    automatable: true,\n                    type: FLOAT\n                },\n                gain: {\n                    value: 0,\n                    min: -40,\n                    max: 40,\n                    automatable: true,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                filterType: {\n                    value: \"lowpass\",\n                    automatable: false,\n                    type: STRING\n                }\n            }\n        },\n        filterType: {\n            enumerable: true,\n            get: function() {\n                return this.filter.type;\n            },\n            set: function(value) {\n                this.filter.type = value;\n            }\n        },\n        Q: {\n            enumerable: true,\n            get: function() {\n                return this.filter.Q;\n            },\n            set: function(value) {\n                this.filter.Q.value = value;\n            }\n        },\n        gain: {\n            enumerable: true,\n            get: function() {\n                return this.filter.gain;\n            },\n            set: function(value) {\n                this.filter.gain.value = value;\n            }\n        },\n        frequency: {\n            enumerable: true,\n            get: function() {\n                return this.filter.frequency;\n            },\n            set: function(value) {\n                this.filter.frequency.value = value;\n            }\n        }\n    });\n\n    Tuna.prototype.MoogFilter = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize\n            .value;\n\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.processor = userContext.createScriptProcessor(this.bufferSize,\n            1,\n            1);\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.processor);\n        this.processor.connect(this.output);\n\n        var in1, in2, in3, in4, out1, out2, out3, out4;\n        in1 = in2 = in3 = in4 = out1 = out2 = out3 = out4 = 0.0;\n        var input, output, f, fb, i, length;\n        this.processor.onaudioprocess = function(e) {\n            input = e.inputBuffer.getChannelData(0),\n                output = e.outputBuffer.getChannelData(0),\n                f = this.cutoff * 1.16,\n                inputFactor = 0.35013 * (f * f) * (f * f);\n            fb = this.resonance * (1.0 - 0.15 * f * f);\n            length = input.length;\n            for (i = 0; i < length; i++) {\n                input[i] -= out4 * fb;\n                input[i] *= inputFactor;\n                out1 = input[i] + 0.3 * in1 + (1 - f) * out1; // Pole 1\n                in1 = input[i];\n                out2 = out1 + 0.3 * in2 + (1 - f) * out2; // Pole 2\n                in2 = out1;\n                out3 = out2 + 0.3 * in3 + (1 - f) * out3; // Pole 3\n                in3 = out2;\n                out4 = out3 + 0.3 * in4 + (1 - f) * out4; // Pole 4\n                in4 = out3;\n                output[i] = out4;\n            }\n        };\n\n        this.cutoff = initValue(properties.cutoff, this.defaults.cutoff\n            .value);\n        this.resonance = initValue(properties.resonance, this.defaults.resonance\n            .value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.MoogFilter.prototype = Object.create(Super, {\n        name: {\n            value: \"MoogFilter\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                bufferSize: {\n                    value: 4096,\n                    min: 256,\n                    max: 16384,\n                    automatable: false,\n                    type: INT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                cutoff: {\n                    value: 0.065,\n                    min: 0.0001,\n                    max: 1.0,\n                    automatable: false,\n                    type: FLOAT\n                },\n                resonance: {\n                    value: 3.5,\n                    min: 0.0,\n                    max: 4.0,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        cutoff: {\n            enumerable: true,\n            get: function() {\n                return this.processor.cutoff;\n            },\n            set: function(value) {\n                this.processor.cutoff = value;\n            }\n        },\n        resonance: {\n            enumerable: true,\n            get: function() {\n                return this.processor.resonance;\n            },\n            set: function(value) {\n                this.processor.resonance = value;\n            }\n        }\n    });\n\n    Tuna.prototype.Overdrive = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.inputDrive = userContext.createGain();\n        this.waveshaper = userContext.createWaveShaper();\n        this.outputDrive = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.inputDrive);\n        this.inputDrive.connect(this.waveshaper);\n        this.waveshaper.connect(this.outputDrive);\n        this.outputDrive.connect(this.output);\n\n        this.ws_table = new Float32Array(this.k_nSamples);\n        this.drive = initValue(properties.drive, this.defaults.drive.value);\n        this.outputGain = initValue(properties.outputGain, this.defaults\n            .outputGain\n            .value);\n        this.curveAmount = initValue(properties.curveAmount, this.defaults\n            .curveAmount\n            .value);\n        this.algorithmIndex = initValue(properties.algorithmIndex, this\n            .defaults\n            .algorithmIndex.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Overdrive.prototype = Object.create(Super, {\n        name: {\n            value: \"Overdrive\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                drive: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT,\n                    scaled: true\n                },\n                outputGain: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT,\n                    scaled: true\n                },\n                curveAmount: {\n                    value: 0.725,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                algorithmIndex: {\n                    value: 0,\n                    min: 0,\n                    max: 5,\n                    automatable: false,\n                    type: INT\n                }\n            }\n        },\n        k_nSamples: {\n            value: 8192\n        },\n        drive: {\n            get: function() {\n                return this.inputDrive.gain;\n            },\n            set: function(value) {\n                this._drive = value;\n            }\n        },\n        curveAmount: {\n            get: function() {\n                return this._curveAmount;\n            },\n            set: function(value) {\n                this._curveAmount = value;\n                if (this._algorithmIndex === undefined) {\n                    this._algorithmIndex = 0;\n                }\n                this.waveshaperAlgorithms[this._algorithmIndex]\n                    (this._curveAmount,\n                        this.k_nSamples, this.ws_table);\n                this.waveshaper.curve = this.ws_table;\n            }\n        },\n        outputGain: {\n            get: function() {\n                return this.outputDrive.gain;\n            },\n            set: function(value) {\n                this._outputGain = dbToWAVolume(value);\n            }\n        },\n        algorithmIndex: {\n            get: function() {\n                return this._algorithmIndex;\n            },\n            set: function(value) {\n                this._algorithmIndex = value;\n                this.curveAmount = this._curveAmount;\n            }\n        },\n        waveshaperAlgorithms: {\n            value: [\n                function(amount, n_samples, ws_table) {\n                    amount = Math.min(amount, 0.9999);\n                    var k = 2 * amount / (1 - amount),\n                        i, x;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        ws_table[i] = (1 + k) * x / (1 + k * Math.abs(x));\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var i, x, y;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        y = ((0.5 * Math.pow((x + 1.4), 2)) - 1) * y >= 0 ? 5.8 : 1.2;\n                        ws_table[i] = tanh(y);\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var i, x, y, a = 1 - amount;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);\n                        ws_table[i] = tanh(y * 2);\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var i, x, y, abx, a = 1 - amount > 0.99 ? 0.99 : 1 - amount;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        abx = Math.abs(x);\n                        if (abx < a) y = abx;\n                        else if (abx > a) y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2));\n                        else if (abx > 1) y = abx;\n                        ws_table[i] = sign(x) * y * (1 / ((a + 1) / 2));\n                    }\n                },\n                function(amount, n_samples, ws_table) { // fixed curve, amount doesn't do anything, the distortion is just from the drive\n                    var i, x;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        if (x < -0.08905) {\n                            ws_table[i] = (-3 / 4) * (1 - (Math.pow((1 - (Math.abs(x) - 0.032857)), 12)) + (1 / 3) * (Math.abs(x) -\n                                0.032847)) + 0.01;\n                        } else if (x >= -0.08905 && x < 0.320018) {\n                            ws_table[i] = (-6.153 * (x * x)) + 3.9375 * x;\n                        } else {\n                            ws_table[i] = 0.630035;\n                        }\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var a = 2 + Math.round(amount * 14),\n                        // we go from 2 to 16 bits, keep in mind for the UI\n                        bits = Math.round(Math.pow(2, a - 1)),\n                        // real number of quantization steps divided by 2\n                        i, x;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        ws_table[i] = Math.round(x * bits) / bits;\n                    }\n                }\n            ]\n        }\n    });\n\n    Tuna.prototype.Phaser = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\n        this.filtersL = [];\n        this.filtersR = [];\n        this.feedbackGainNodeL = userContext.createGain();\n        this.feedbackGainNodeR = userContext.createGain();\n        this.merger = userContext.createChannelMerger(2);\n        this.filteredSignal = userContext.createGain();\n        this.output = userContext.createGain();\n        this.lfoL = new userInstance.LFO({\n            target: this.filtersL,\n            callback: this.callback\n        });\n        this.lfoR = new userInstance.LFO({\n            target: this.filtersR,\n            callback: this.callback\n        });\n\n        var i = this.stage;\n        while (i--) {\n            this.filtersL[i] = userContext.createBiquadFilter();\n            this.filtersR[i] = userContext.createBiquadFilter();\n            this.filtersL[i].type = \"allpass\";\n            this.filtersR[i].type = \"allpass\";\n        }\n        this.input.connect(this.splitter);\n        this.input.connect(this.output);\n        this.splitter.connect(this.filtersL[0], 0, 0);\n        this.splitter.connect(this.filtersR[0], 1, 0);\n        this.connectInOrder(this.filtersL);\n        this.connectInOrder(this.filtersR);\n        this.filtersL[this.stage - 1].connect(this.feedbackGainNodeL);\n        this.filtersL[this.stage - 1].connect(this.merger, 0, 0);\n        this.filtersR[this.stage - 1].connect(this.feedbackGainNodeR);\n        this.filtersR[this.stage - 1].connect(this.merger, 0, 1);\n        this.feedbackGainNodeL.connect(this.filtersL[0]);\n        this.feedbackGainNodeR.connect(this.filtersR[0]);\n        this.merger.connect(this.output);\n\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\n        this.baseModulationFrequency = properties.baseModulationFrequency || this.defaults.baseModulationFrequency.value;\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\n\n        this.lfoL.activate(true);\n        this.lfoR.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Phaser.prototype = Object.create(Super, {\n        name: {\n            value: \"Phaser\"\n        },\n        stage: {\n            value: 4\n        },\n        defaults: {\n            writable: true,\n            value: {\n                rate: {\n                    value: 0.1,\n                    min: 0,\n                    max: 8,\n                    automatable: false,\n                    type: FLOAT\n                },\n                depth: {\n                    value: 0.6,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                feedback: {\n                    value: 0.7,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                stereoPhase: {\n                    value: 40,\n                    min: 0,\n                    max: 180,\n                    automatable: false,\n                    type: FLOAT\n                },\n                baseModulationFrequency: {\n                    value: 700,\n                    min: 500,\n                    max: 1500,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        callback: {\n            value: function(filters, value) {\n                for (var stage = 0; stage < 4; stage++) {\n                    filters[stage].frequency.value = value;\n                }\n            }\n        },\n        depth: {\n            get: function() {\n                return this._depth;\n            },\n            set: function(value) {\n                this._depth = value;\n                this.lfoL.oscillation = this._baseModulationFrequency * this._depth;\n                this.lfoR.oscillation = this._baseModulationFrequency * this._depth;\n            }\n        },\n        rate: {\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._rate = value;\n                this.lfoL.frequency = this._rate;\n                this.lfoR.frequency = this._rate;\n            }\n        },\n        baseModulationFrequency: {\n            enumerable: true,\n            get: function() {\n                return this._baseModulationFrequency;\n            },\n            set: function(value) {\n                this._baseModulationFrequency = value;\n                this.lfoL.offset = this._baseModulationFrequency;\n                this.lfoR.offset = this._baseModulationFrequency;\n                this._depth = this._depth;\n            }\n        },\n        feedback: {\n            get: function() {\n                return this._feedback;\n            },\n            set: function(value) {\n                this._feedback = value;\n                this.feedbackGainNodeL.gain.value = this._feedback;\n                this.feedbackGainNodeR.gain.value = this._feedback;\n            }\n        },\n        stereoPhase: {\n            get: function() {\n                return this._stereoPhase;\n            },\n            set: function(value) {\n                this._stereoPhase = value;\n                var newPhase = this.lfoL._phase + this._stereoPhase *\n                    Math.PI /\n                    180;\n                newPhase = fmod(newPhase, 2 * Math.PI);\n                this.lfoR._phase = newPhase;\n            }\n        }\n    });\n\n    Tuna.prototype.PingPongDelay = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.wetLevel = userContext.createGain();\n        this.stereoToMonoMix = userContext.createGain();\n        this.feedbackLevel = userContext.createGain();\n        this.output = userContext.createGain();\n        this.delayLeft = userContext.createDelay();\n        this.delayRight = userContext.createDelay();\n\n        this.activateNode = userContext.createGain();\n        this.splitter = userContext.createChannelSplitter(2);\n        this.merger = userContext.createChannelMerger(2);\n\n        this.activateNode.connect(this.splitter);\n        this.splitter.connect(this.stereoToMonoMix, 0, 0);\n        this.splitter.connect(this.stereoToMonoMix, 1, 0);\n        this.stereoToMonoMix.gain.value = .5;\n        this.stereoToMonoMix.connect(this.wetLevel);\n        this.wetLevel.connect(this.delayLeft);\n        this.feedbackLevel.connect(this.delayLeft);\n        this.delayLeft.connect(this.delayRight);\n        this.delayRight.connect(this.feedbackLevel);\n        this.delayLeft.connect(this.merger, 0, 0);\n        this.delayRight.connect(this.merger, 0, 1);\n        this.merger.connect(this.output);\n        this.activateNode.connect(this.output);\n\n        this.delayTimeLeft = properties.delayTimeLeft !== undefined ? properties.delayTimeLeft : this.defaults.delayTimeLeft.value;\n        this.delayTimeRight = properties.delayTimeRight !== undefined ? properties.delayTimeRight : this.defaults.delayTimeRight.value;\n        this.feedbackLevel.gain.value = properties.feedback !== undefined ? properties.feedback : this.defaults.feedback.value;\n        this.wetLevel.gain.value = properties.wetLevel !== undefined ? properties.wetLevel : this.defaults.wetLevel.value;\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.PingPongDelay.prototype = Object.create(Super, {\n        name: {\n            value: \"PingPongDelay\"\n        },\n        delayTimeLeft: {\n            enumerable: true,\n            get: function() {\n                return this._delayTimeLeft;\n            },\n            set: function(value) {\n                this._delayTimeLeft = value;\n                this.delayLeft.delayTime.value = value / 1000;\n            }\n        },\n        delayTimeRight: {\n            enumerable: true,\n            get: function() {\n                return this._delayTimeRight;\n            },\n            set: function(value) {\n                this._delayTimeRight = value;\n                this.delayRight.delayTime.value = value / 1000;\n            }\n        },\n        defaults: {\n            writable: true,\n            value: {\n                delayTimeLeft: {\n                    value: 200,\n                    min: 1,\n                    max: 10000,\n                    automatable: false,\n                    type: INT\n                },\n                delayTimeRight: {\n                    value: 400,\n                    min: 1,\n                    max: 10000,\n                    automatable: false,\n                    type: INT\n                },\n                feedback: {\n                    value: 0.3,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                wetLevel: {\n                    value: 0.5,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        }\n    });\n\n    Tuna.prototype.Tremolo = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.splitter = this.activateNode = userContext.createChannelSplitter(\n                2),\n            this.amplitudeL = userContext.createGain(), this.amplitudeR =\n            userContext.createGain(), this.merger = userContext.createChannelMerger(\n                2), this.output = userContext.createGain();\n        this.lfoL = new userInstance.LFO({\n            target: this.amplitudeL.gain,\n            callback: pipe\n        });\n        this.lfoR = new userInstance.LFO({\n            target: this.amplitudeR.gain,\n            callback: pipe\n        });\n\n        this.input.connect(this.splitter);\n        this.splitter.connect(this.amplitudeL, 0);\n        this.splitter.connect(this.amplitudeR, 1);\n        this.amplitudeL.connect(this.merger, 0, 0);\n        this.amplitudeR.connect(this.merger, 0, 1);\n        this.merger.connect(this.output);\n\n        this.rate = properties.rate || this.defaults.rate.value;\n        this.intensity = initValue(properties.intensity, this.defaults.intensity\n            .value);\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults\n            .stereoPhase\n            .value);\n\n        this.lfoL.offset = 1 - (this.intensity / 2);\n        this.lfoR.offset = 1 - (this.intensity / 2);\n        this.lfoL.phase = this.stereoPhase * Math.PI / 180;\n\n        this.lfoL.activate(true);\n        this.lfoR.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Tremolo.prototype = Object.create(Super, {\n        name: {\n            value: \"Tremolo\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                intensity: {\n                    value: 0.3,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                stereoPhase: {\n                    value: 0,\n                    min: 0,\n                    max: 180,\n                    automatable: false,\n                    type: FLOAT\n                },\n                rate: {\n                    value: 5,\n                    min: 0.1,\n                    max: 11,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        intensity: {\n            enumerable: true,\n            get: function() {\n                return this._intensity;\n            },\n            set: function(value) {\n                this._intensity = value;\n                this.lfoL.offset = 1 - this._intensity / 2;\n                this.lfoR.offset = 1 - this._intensity / 2;\n                this.lfoL.oscillation = this._intensity;\n                this.lfoR.oscillation = this._intensity;\n            }\n        },\n        rate: {\n            enumerable: true,\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._rate = value;\n                this.lfoL.frequency = this._rate;\n                this.lfoR.frequency = this._rate;\n            }\n        },\n        stereoPhase: {\n            enumerable: true,\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._stereoPhase = value;\n                var newPhase = this.lfoL._phase + this._stereoPhase *\n                    Math.PI /\n                    180;\n                newPhase = fmod(newPhase, 2 * Math.PI);\n                this.lfoR.phase = newPhase;\n            }\n        }\n    });\n\n    Tuna.prototype.WahWah = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.envelopeFollower = new userInstance.EnvelopeFollower({\n            target: this,\n            callback: function(context, value) {\n                context.sweep = value;\n            }\n        });\n        this.filterBp = userContext.createBiquadFilter();\n        this.filterPeaking = userContext.createBiquadFilter();\n        this.output = userContext.createGain();\n\n        //Connect AudioNodes\n        this.activateNode.connect(this.filterBp);\n        this.filterBp.connect(this.filterPeaking);\n        this.filterPeaking.connect(this.output);\n\n        //Set Properties\n        this.init();\n        this.automode = initValue(properties.enableAutoMode, this.defaults\n            .automode\n            .value);\n        this.resonance = properties.resonance || this.defaults.resonance\n            .value;\n        this.sensitivity = initValue(properties.sensitivity, this.defaults\n            .sensitivity\n            .value);\n        this.baseFrequency = initValue(properties.baseFrequency, this.defaults\n            .baseFrequency\n            .value);\n        this.excursionOctaves = properties.excursionOctaves || this.defaults\n            .excursionOctaves\n            .value;\n        this.sweep = initValue(properties.sweep, this.defaults.sweep.value);\n\n        this.activateNode.gain.value = 2;\n        this.envelopeFollower.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.WahWah.prototype = Object.create(Super, {\n        name: {\n            value: \"WahWah\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                automode: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                baseFrequency: {\n                    value: 0.5,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                excursionOctaves: {\n                    value: 2,\n                    min: 1,\n                    max: 6,\n                    automatable: false,\n                    type: FLOAT\n                },\n                sweep: {\n                    value: 0.2,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                resonance: {\n                    value: 10,\n                    min: 1,\n                    max: 100,\n                    automatable: false,\n                    type: FLOAT\n                },\n                sensitivity: {\n                    value: 0.5,\n                    min: -1,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        activateCallback: {\n            value: function(value) {\n                this.automode = value;\n            }\n        },\n        automode: {\n            get: function() {\n                return this._automode;\n            },\n            set: function(value) {\n                this._automode = value;\n                if (value) {\n                    this.activateNode.connect(this.envelopeFollower.input);\n                    this.envelopeFollower.activate(true);\n                } else {\n                    this.envelopeFollower.activate(false);\n                    this.activateNode.disconnect();\n                    this.activateNode.connect(this.filterBp);\n                }\n            }\n        },\n        filterFreqTimeout: {\n            value: 0\n        },\n        setFilterFreq: {\n            value: function() {\n                try {\n                    this.filterBp.frequency.value = this._baseFrequency + this._excursionFrequency * this._sweep;\n                    this.filterPeaking.frequency.value = this._baseFrequency + this._excursionFrequency * this._sweep;\n                } catch (e) {\n                    clearTimeout(this.filterFreqTimeout);\n                    //put on the next cycle to let all init properties be set\n                    this.filterFreqTimeout = setTimeout(function() {\n                        this.setFilterFreq();\n                    }.bind(this), 0);\n                }\n            }\n        },\n        sweep: {\n            enumerable: true,\n            get: function() {\n                return this._sweep.value;\n            },\n            set: function(value) {\n                this._sweep = Math.pow(value > 1 ? 1 : value <\n                    0 ? 0 :\n                    value,\n                    this._sensitivity);\n                this.setFilterFreq();\n            }\n        },\n        baseFrequency: {\n            enumerable: true,\n            get: function() {\n                return this._baseFrequency;\n            },\n            set: function(value) {\n                this._baseFrequency = 50 * Math.pow(10, value *\n                    2);\n                this._excursionFrequency = Math.min(userContext\n                    .sampleRate /\n                    2,\n                    this.baseFrequency * Math.pow(2, this._excursionOctaves)\n                );\n                this.setFilterFreq();\n            }\n        },\n        excursionOctaves: {\n            enumerable: true,\n            get: function() {\n                return this._excursionOctaves;\n            },\n            set: function(value) {\n                this._excursionOctaves = value;\n                this._excursionFrequency = Math.min(userContext\n                    .sampleRate /\n                    2,\n                    this.baseFrequency * Math.pow(2, this._excursionOctaves)\n                );\n                this.setFilterFreq();\n            }\n        },\n        sensitivity: {\n            enumerable: true,\n            get: function() {\n                return this._sensitivity;\n            },\n            set: function(value) {\n                this._sensitivity = Math.pow(10, value);\n            }\n        },\n        resonance: {\n            enumerable: true,\n            get: function() {\n                return this._resonance;\n            },\n            set: function(value) {\n                this._resonance = value;\n                this.filterPeaking.Q = this._resonance;\n            }\n        },\n        init: {\n            value: function() {\n                this.output.gain.value = 1;\n                this.filterPeaking.type = \"peaking\";\n                this.filterBp.type = \"bandpass\";\n                this.filterPeaking.frequency.value = 100;\n                this.filterPeaking.gain.value = 20;\n                this.filterPeaking.Q.value = 5;\n                this.filterBp.frequency.value = 100;\n                this.filterBp.Q.value = 1;\n            }\n        }\n    });\n\n    Tuna.prototype.EnvelopeFollower = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.jsNode = this.output = userContext.createScriptProcessor(\n            this.buffersize,\n            1, 1);\n\n        this.input.connect(this.output);\n\n        this.attackTime = initValue(properties.attackTime, this.defaults\n            .attackTime\n            .value);\n        this.releaseTime = initValue(properties.releaseTime, this.defaults\n            .releaseTime\n            .value);\n        this._envelope = 0;\n        this.target = properties.target || {};\n        this.callback = properties.callback || function() {};\n    };\n    Tuna.prototype.EnvelopeFollower.prototype = Object.create(Super, {\n        name: {\n            value: \"EnvelopeFollower\"\n        },\n        defaults: {\n            value: {\n                attackTime: {\n                    value: 0.003,\n                    min: 0,\n                    max: 0.5,\n                    automatable: false,\n                    type: FLOAT\n                },\n                releaseTime: {\n                    value: 0.5,\n                    min: 0,\n                    max: 0.5,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        buffersize: {\n            value: 256\n        },\n        envelope: {\n            value: 0\n        },\n        sampleRate: {\n            value: 44100\n        },\n        attackTime: {\n            enumerable: true,\n            get: function() {\n                return this._attackTime;\n            },\n            set: function(value) {\n                this._attackTime = value;\n                this._attackC = Math.exp(-1 / this._attackTime *\n                    this.sampleRate /\n                    this.buffersize);\n            }\n        },\n        releaseTime: {\n            enumerable: true,\n            get: function() {\n                return this._releaseTime;\n            },\n            set: function(value) {\n                this._releaseTime = value;\n                this._releaseC = Math.exp(-1 / this._releaseTime *\n                    this.sampleRate /\n                    this.buffersize);\n            }\n        },\n        callback: {\n            get: function() {\n                return this._callback;\n            },\n            set: function(value) {\n                if (typeof value === \"function\") {\n                    this._callback = value;\n                } else {\n                    console.error(\"tuna.js: \" + this.name +\n                        \": Callback must be a function!\");\n                }\n            }\n        },\n        target: {\n            get: function() {\n                return this._target;\n            },\n            set: function(value) {\n                this._target = value;\n            }\n        },\n        activate: {\n            value: function(doActivate) {\n                this.activated = doActivate;\n                if (doActivate) {\n                    this.jsNode.connect(userContext.destination);\n                    this.jsNode.onaudioprocess = this.returnCompute(\n                        this);\n                } else {\n                    this.jsNode.disconnect();\n                    this.jsNode.onaudioprocess = null;\n                }\n            }\n        },\n        returnCompute: {\n            value: function(instance) {\n                return function(event) {\n                    instance.compute(event);\n                };\n            }\n        },\n        compute: {\n            value: function(event) {\n                var count = event.inputBuffer.getChannelData(0)\n                    .length,\n                    channels = event.inputBuffer.numberOfChannels,\n                    current, chan, rms, i;\n                chan = rms = i = 0;\n                if (channels > 1) { //need to mixdown\n                    for (i = 0; i < count; ++i) {\n                        for (; chan < channels; ++chan) {\n                            current = event.inputBuffer.getChannelData(chan)[i];\n                            rms += (current * current) / channels;\n                        }\n                    }\n                } else {\n                    for (i = 0; i < count; ++i) {\n                        current = event.inputBuffer.getChannelData(0)[i];\n                        rms += (current * current);\n                    }\n                }\n                rms = Math.sqrt(rms);\n\n                if (this._envelope < rms) {\n                    this._envelope *= this._attackC;\n                    this._envelope += (1 - this._attackC) * rms;\n                } else {\n                    this._envelope *= this._releaseC;\n                    this._envelope += (1 - this._releaseC) *\n                        rms;\n                }\n                this._callback(this._target, this._envelope);\n            }\n        }\n    });\n\n    Tuna.prototype.LFO = function(properties) {\n        //Instantiate AudioNode\n        this.output = userContext.createScriptProcessor(256, 1, 1);\n        this.activateNode = userContext.destination;\n\n        //Set Properties\n        this.frequency = initValue(properties.frequency, this.defaults.frequency\n            .value);\n        this.offset = initValue(properties.offset, this.defaults.offset.value);\n        this.oscillation = initValue(properties.oscillation, this.defaults\n            .oscillation\n            .value);\n        this.phase = initValue(properties.phase, this.defaults.phase.value);\n        this.target = properties.target || {};\n        this.output.onaudioprocess = this.callback(properties.callback ||\n            function() {});\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.LFO.prototype = Object.create(Super, {\n        name: {\n            value: \"LFO\"\n        },\n        bufferSize: {\n            value: 256\n        },\n        sampleRate: {\n            value: 44100\n        },\n        defaults: {\n            value: {\n                frequency: {\n                    value: 1,\n                    min: 0,\n                    max: 20,\n                    automatable: false,\n                    type: FLOAT\n                },\n                offset: {\n                    value: 0.85,\n                    min: 0,\n                    max: 22049,\n                    automatable: false,\n                    type: FLOAT\n                },\n                oscillation: {\n                    value: 0.3,\n                    min: -22050,\n                    max: 22050,\n                    automatable: false,\n                    type: FLOAT\n                },\n                phase: {\n                    value: 0,\n                    min: 0,\n                    max: 2 * Math.PI,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        frequency: {\n            get: function() {\n                return this._frequency;\n            },\n            set: function(value) {\n                this._frequency = value;\n                this._phaseInc = 2 * Math.PI * this._frequency *\n                    this.bufferSize /\n                    this.sampleRate;\n            }\n        },\n        offset: {\n            get: function() {\n                return this._offset;\n            },\n            set: function(value) {\n                this._offset = value;\n            }\n        },\n        oscillation: {\n            get: function() {\n                return this._oscillation;\n            },\n            set: function(value) {\n                this._oscillation = value;\n            }\n        },\n        phase: {\n            get: function() {\n                return this._phase;\n            },\n            set: function(value) {\n                this._phase = value;\n            }\n        },\n        target: {\n            get: function() {\n                return this._target;\n            },\n            set: function(value) {\n                this._target = value;\n            }\n        },\n        activate: {\n            value: function(doActivate) {\n                if (!doActivate) {\n                    this.output.disconnect(userContext.destination);\n                } else {\n                    this.output.connect(userContext.destination);\n                }\n            }\n        },\n        callback: {\n            value: function(callback) {\n                var that = this;\n                return function() {\n                    that._phase += that._phaseInc;\n                    if (that._phase > 2 * Math.PI) {\n                        that._phase = 0;\n                    }\n                    callback(that._target, that._offset +\n                        that._oscillation *\n                        Math.sin(that._phase));\n                };\n            }\n        }\n    });\n\n    Tuna.toString = Tuna.prototype.toString = function() {\n        return \"Please visit https://github.com/Theodeus/tuna/wiki for instructions on how to use Tuna.js\";\n    };\n})(this);\n;\n\n/** Let's do the vendor-prefix dance. **/\n    var audioContext = window.AudioContext || window.webkitAudioContext;\n    var context      = new audioContext();\n    var MediaStreamHelper = {\n        /*\n\t        The browser have to support Promises if the browser supports only the deprecated version of getUserMedia.\n\t        There is a polyfill for Promises!\n          Example:\n\t          MediaStreamHelper.initialize(window);\n\t          getUserMedia({audio: true}).then(function(stream) {}).catch(function(error) {});\n\t*/\n\t\t    UNSUPPORT: false,\n\t\t    SUPPORT_STANDARD_VERSION: 1,\n\t\t    SUPPORT_DEPRECATED_VERSION: 2,\n\t\t    isGetUserMediaSupported: function isGetUserMediaSupported(window) {\n\t\t\t\t    if(window.navigator.mediaDevices.getUserMedia) return this.SUPPORT_STANDARD_VERSION;\n\t\t\t\t    else if(window.navigator.getUserMedia) return this.SUPPORT_DEPRECATED_VERSION;\n\t\t\t\t    else\n\t\t\t\t\t    return this.UNSUPPORT;\n\t\t\t    },\n\t\t    initialize: function initializeMediaStreamHelper(window) {\n\t\t\t\t    window.navigator.mediaDevices = window.navigator.mediaDevices || {};\n\t\t\t\t    window.navigator.getUserMedia = window.navigator.getUserMedia || window.navigator.webkitGetUserMedia || window.navigator.mozGetUserMedia;\n\n\t\t\t\t    var howIsItSupported = this.isGetUserMediaSupported(window);\n\t\t\t\t    if(howIsItSupported != this.UNSUPPORT)\n\t\t\t\t    {\n\t\t\t\t\t    window.getUserMedia = howIsItSupported == this.SUPPORT_STANDARD_VERSION ?\n\t\t\t\t\t\t    window.navigator.mediaDevices.getUserMedia.bind(window.navigator.mediaDevices) :\n\t\t\t\t\t\t    function(constraints) {\n\t\t\t\t\t\t\t\t    return new Promise(function(resolve, reject) {\n\t\t\t\t\t\t\t\t\t\t    window.navigator.getUserMedia(constraints, resolve, reject);\n\t\t\t\t\t\t\t\t\t    });\n\t\t\t\t\t\t\t    };\n\t\t\t\t    }\n\t\t\t    }\n\t    };\n    MediaStreamHelper.initialize(window);\n    if(window.getUserMedia) console.log(\"Your browser supports getUserMedia.\");\n    else\n        console.log(\"Your browser does not support getUserMedia.\");\n/////////////////////////////////////////\n\nvar Wad = (function(){\n\n/** Pre-render a noise buffer instead of generating noise on the fly. **/\n    var noiseBuffer = (function(){\n        // the initial seed\n        Math.seed = 6;\n        Math.seededRandom = function(max, min){\n            max = max || 1;\n            min = min || 0;\n            Math.seed = ( Math.seed * 9301 + 49297 ) % 233280;\n            var rnd = Math.seed / 233280;\n\n            return min + rnd * (max - min);\n        }\n        var bufferSize = 2 * context.sampleRate;\n        var noiseBuffer = context.createBuffer(1, bufferSize, context.sampleRate);\n        var output = noiseBuffer.getChannelData(0);\n        for ( var i = 0; i < bufferSize; i++ ) {\n            output[i] = Math.seededRandom() * 2 - 1;\n        }\n        return noiseBuffer;\n    })()\n/////////////////////////////////////////////////////////////////////////\n\n/** a lil hack. just be glad it isn't on Object.prototype. **/\n    var isArray = function(object){\n        return Object.prototype.toString.call(object) === '[object Array]';\n    }\n\n/** Set up the default ADSR envelope. **/\n    var constructEnv = function(that, arg){\n        that.env = { //default envelope, if one is not specified on play\n            attack  : arg.env ? valueOrDefault(arg.env.attack,  1) : 0,    // time in seconds from onset to peak volume\n            decay   : arg.env ? valueOrDefault(arg.env.decay,   0) : 0,    // time in seconds from peak volume to sustain volume\n            sustain : arg.env ? valueOrDefault(arg.env.sustain, 1) : 1,    // sustain volume level, as a percent of peak volume. min:0, max:1\n            hold    : arg.env ? valueOrDefault(arg.env.hold, 3.14159) : 3.14159, // time in seconds to maintain sustain volume\n            release : arg.env ? valueOrDefault(arg.env.release, 0) : 0     // time in seconds from sustain volume to zero volume\n        };\n        that.defaultEnv = {\n            attack  : arg.env ? valueOrDefault(arg.env.attack,  1) : 0,    // time in seconds from onset to peak volume\n            decay   : arg.env ? valueOrDefault(arg.env.decay,   0) : 0,    // time in seconds from peak volume to sustain volume\n            sustain : arg.env ? valueOrDefault(arg.env.sustain, 1) : 1,    // sustain volume level, as a percent of peak volume. min:0, max:1\n            hold    : arg.env ? valueOrDefault(arg.env.hold, 3.14159) : 3.14159, // time in seconds to maintain sustain volume\n            release : arg.env ? valueOrDefault(arg.env.release, 0) : 0     // time in seconds from sustain volume to zero volume\n        };\n    }\n/////////////////////////////////////////\n\n\n/** Set up the default filter and filter envelope. **/\n    var constructFilter = function(that, arg){\n\n        if ( !arg.filter ) { arg.filter = null; }\n\n        else if ( isArray(arg.filter) ) {\n            that.filter = arg.filter.map(function(filterArg){\n                return {\n                    type : filterArg.type || 'lowpass',\n                    frequency : filterArg.frequency || 600,\n                    q : filterArg.q || 1,\n                    env : filterArg.env || null,\n                }\n            });\n        }\n        else {\n            that.filter  = [{\n                type : arg.filter.type || 'lowpass',\n                frequency : arg.filter.frequency || 600,\n                q : arg.filter.q || 1,\n                env : arg.filter.env ||null,\n            }];\n        }\n    }\n//////////////////////////////////////////////////////\n\n\n/** If the Wad uses an audio file as the source, request it from the server.\nDon't let the Wad play until all necessary files have been downloaded. **/\n    var requestAudioFile = function(that, callback){\n        var request = new XMLHttpRequest();\n        request.open(\"GET\", that.source, true);\n        request.responseType = \"arraybuffer\";\n        that.playable--;\n        request.onload = function(){\n            context.decodeAudioData(request.response, function (decodedBuffer){\n                that.decodedBuffer = decodedBuffer;\n                if ( that.env.hold === 3.14159 ) { // audio buffers should not use the default hold\n                    that.env.hold = that.decodedBuffer.duration + 1\n                }\n                if ( callback ) { callback(that); }\n                that.playable++;\n                if ( that.playOnLoad ) { that.play(that.playOnLoadArg); }\n            })\n        };\n        request.send();\n    };\n//////////////////////////////////////////////////////////////////////////\n\n/** Set up the vibrato LFO **/\n    var constructVibrato = function(that, arg){\n        if ( arg.vibrato ) {\n            that.vibrato = {\n                shape     : valueOrDefault(arg.vibrato.shape, 'sine'),\n                speed     : valueOrDefault(arg.vibrato.speed, 1),\n                magnitude : valueOrDefault(arg.vibrato.magnitude, 5),\n                attack    : valueOrDefault(arg.vibrato.attack, 0)\n            };\n        }\n        else { that.vibrato = null; }\n    };\n//////////////////////////////\n\n\n/** Set up the tremolo LFO **/\n    var constructTremolo = function(that, arg){\n        if ( arg.tremolo ) {\n            that.tremolo = {\n                shape     : valueOrDefault(arg.tremolo.shape, 'sine'),\n                speed     : valueOrDefault(arg.tremolo.speed, 1),\n                magnitude : valueOrDefault(arg.tremolo.magnitude, 5),\n                attack    : valueOrDefault(arg.tremolo.attack, 1)\n            };\n        }\n        else { that.tremolo = null; }\n    };\n//////////////////////////////\n\n/** Grab the reverb impulse response file from a server.\nYou may want to change Wad.defaultImpulse to serve files from your own server.\nCheck out http://www.voxengo.com/impulses/ for free impulse responses. **/\n    var constructReverb = function(that, arg){\n        if ( arg.reverb ) {\n            that.reverb = { wet : valueOrDefault(arg.reverb.wet, 1) };\n            var impulseURL = arg.reverb.impulse || Wad.defaultImpulse;\n            var request = new XMLHttpRequest();\n            request.open(\"GET\", impulseURL, true);\n            request.responseType = \"arraybuffer\";\n            that.playable--;\n            request.onload = function(){\n                context.decodeAudioData(request.response, function (decodedBuffer){\n\n                    that.reverb.buffer = decodedBuffer;\n                    that.playable++;\n                    if ( that.playOnLoad ) { that.play(that.playOnLoadArg); }\n                    if ( that instanceof Wad.Poly ) { that.setUp(arg); }\n                    if ( that.source === 'mic' && that.reverb && that.reverb.buffer && that.reverb.node && !that.reverb.node.buffer ) { // I think this is only relevant when calling play() with args on a mic\n                        that.reverb.node.convolver.buffer = that.reverb.buffer;\n                    }\n\n                })\n            };\n            request.send();\n        }\n        else {\n            that.reverb = null;\n        }\n    };\n\n    var constructPanning = function(that, arg){\n        if ( 'panning' in arg ) {\n            that.panning = { location : arg.panning };\n            if ( typeof(arg.panning) === \"number\" ) {\n                that.panning.type = 'stereo';\n            }\n\n            else {\n                that.panning.type = '3d'\n                that.panning.panningModel = arg.panningModel || 'equalpower';\n            }\n        }\n\n        else {\n            that.panning = {\n                location : 0,\n                type     : 'stereo',\n            };\n        }\n        if ( that.panning.type === 'stereo' && !context.createStereoPanner ) {\n            console.log(\"Your browser does not support stereo panning. Falling back to 3D panning.\")\n            that.panning = {\n                location     : [0,0,0],\n                type         : '3d',\n                panningModel : 'equalpower',\n            }\n        }\n    };\n//////////////////////////////////////////////////////////////////////////////\n    var constructDelay = function(that, arg){\n        if ( arg.delay ) {\n            that.delay = {\n                delayTime    : valueOrDefault(arg.delay.delayTime, .5),\n                maxDelayTime : valueOrDefault(arg.delay.maxDelayTime, 2),\n                feedback     : valueOrDefault(arg.delay.feedback, .25),\n                wet          : valueOrDefault(arg.delay.wet, .25)\n            };\n        }\n        else { that.delay = null; }\n    };\n/** Special initialization and configuration for microphone Wads **/\n    var getConsent = function(that, arg) {\n        that.nodes             = [];\n        that.mediaStreamSource = null;\n        that.gain              = null;\n        getUserMedia({audio: true, video: false}).then(function(stream) {\n            // console.log('got stream')\n            that.mediaStreamSource = context.createMediaStreamSource(stream);\n            Wad.micConsent = true\n            setUpMic(that, arg);\n        }).catch(function(error) { console.log('Error setting up microphone input: ', error); }); // This is the error callback.\n    };\n////////////////////////////////////////////////////////////////////\n\n    var setUpMic = function(that, arg){\n        that.nodes           = [];\n        that.gain            = context.createGain();\n        that.gain.gain.value = valueOrDefault(arg.volume,that.volume);\n        that.nodes.push(that.mediaStreamSource);\n        that.nodes.push(that.gain);\n        // console.log('that ', arg)\n\n        if ( that.filter || arg.filter ) { createFilters(that, arg); }\n\n        if ( that.reverb || arg.reverb ) { setUpReverbOnPlay(that, arg); }\n\n        constructPanning(that, arg);\n        setUpPanningOnPlay(that, arg);\n\n        if ( that.delay || arg.delay ) {\n            setUpDelayOnPlay(that, arg);\n        }\n        setUpTunaOnPlay(that, arg)\n        that.setUpExternalFxOnPlay(arg, context);\n    }\n\n    var Wad = function(arg){\n/** Set basic Wad properties **/\n        this.source        = arg.source;\n        this.destination   = arg.destination || context.destination; // the last node the sound is routed to\n        this.volume        = valueOrDefault(arg.volume, 1); // peak volume. min:0, max:1 (actually max is infinite, but ...just keep it at or below 1)\n        this.defaultVolume = this.volume;\n        this.playable      = 1; // if this is less than 1, this Wad is still waiting for a file to download before it can play\n        this.pitch         = Wad.pitches[arg.pitch] || arg.pitch || 440;\n        this.detune        = arg.detune || 0 // In Cents.\n        this.globalReverb  = arg.globalReverb || false;\n        this.gain          = [];\n        this.loop          = arg.loop || false;\n        this.tuna          = arg.tuna || null;\n        constructEnv(this, arg);\n        constructFilter(this, arg);\n        constructVibrato(this, arg);\n        constructTremolo(this, arg);\n        constructReverb(this, arg);\n        this.constructExternalFx(arg, context);\n        constructPanning(this, arg);\n        constructDelay(this, arg);\n////////////////////////////////\n\n\n/** If the Wad's source is noise, set the Wad's buffer to the noise buffer we created earlier. **/\n        if ( this.source === 'noise' ) {\n            this.decodedBuffer = noiseBuffer;\n        }\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n/** If the Wad's source is the microphone, the rest of the setup happens here. **/\n        else if ( this.source === 'mic' ) {\n            getConsent(this, arg);\n        }\n//////////////////////////////////////////////////////////////////////////////////\n\n\n/** If the Wad's source is an object, assume it is a buffer from a recorder. There's probably a better way to handle this. **/\n        else if ( typeof this.source == 'object' ) {\n            var newBuffer = context.createBuffer(2, this.source[0].length, context.sampleRate);\n            newBuffer.getChannelData(0).set(this.source[0]);\n            newBuffer.getChannelData(1).set(this.source[1]);\n            this.decodedBuffer = newBuffer;\n        }\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n/** If the source is not a pre-defined value, assume it is a URL for an audio file, and grab it now. **/\n        else if ( !( this.source in { 'sine' : 0, 'sawtooth' : 0, 'square' : 0, 'triangle' : 0 } ) ) {\n            requestAudioFile(this, arg.callback);\n        }\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n        else { arg.callback && arg.callback(this) }\n    };\n    Wad.micConsent = false\n    Wad.audioContext = context\n    if ( window.Tuna != undefined ) {\n        Wad.tuna = new Tuna(Wad.audioContext)\n    }\n\n/** When a note is played, these two functions will schedule changes in volume and filter frequency,\nas specified by the volume envelope and filter envelope **/\n    var filterEnv = function(wad, arg){\n        wad.filter.forEach(function (filter, index){\n            filter.node.frequency.linearRampToValueAtTime(filter.frequency, arg.exactTime);\n            filter.node.frequency.linearRampToValueAtTime(filter.env.frequency, arg.exactTime + filter.env.attack);\n        });\n    };\n\n    var playEnv = function(wad, arg){\n        wad.gain[0].gain.linearRampToValueAtTime(0.0001, arg.exactTime);\n        wad.gain[0].gain.linearRampToValueAtTime(wad.volume, arg.exactTime + wad.env.attack + 0.00001);\n        wad.gain[0].gain.linearRampToValueAtTime(wad.volume * wad.env.sustain, arg.exactTime + wad.env.attack + wad.env.decay + 0.00002);\n        wad.gain[0].gain.linearRampToValueAtTime(wad.volume * wad.env.sustain, arg.exactTime + wad.env.attack + wad.env.decay + wad.env.hold + 0.00003);\n        wad.gain[0].gain.linearRampToValueAtTime(0.0001, arg.exactTime + wad.env.attack + wad.env.decay + wad.env.hold + wad.env.release + 0.00004);\n        wad.soundSource.start(arg.exactTime);\n        wad.soundSource.stop(arg.exactTime + wad.env.attack + wad.env.decay + wad.env.hold + wad.env.release);\n    };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n/** When all the nodes are set up for this Wad, this function plugs them into each other,\nwith special handling for nodes with custom interfaces (e.g. reverb, delay). **/\n    var plugEmIn = function(that, arg){\n        // console.log('nodes? ', that.nodes)\n        var destination = ( arg && arg.destination ) || that.destination;\n        for ( var i = 1; i < that.nodes.length; i++ ) {\n            if ( that.nodes[i-1].interface === 'custom' ) {\n                var from = that.nodes[i-1].output;\n            }\n            else { // assume native interface\n                var from = that.nodes[i-1];\n            }\n            if ( that.nodes[i].interface === 'custom' ) {\n                var to = that.nodes[i].input\n            }\n            else { // assume native interface\n                var to = that.nodes[i]\n            }\n            from.connect(to);\n        }\n        if ( that.nodes[that.nodes.length-1].interface === 'custom') {\n            var lastStop = that.nodes[that.nodes.length-1].output;\n        }\n        else { // assume native interface\n            var lastStop = that.nodes[that.nodes.length-1];\n        }\n        lastStop.connect(destination);\n\n        /** Global reverb is super deprecated, and should be removed at some point. **/\n        if ( Wad.reverb && that.globalReverb ) {\n            that.nodes[that.nodes.length - 1].connect(Wad.reverb.node);\n            Wad.reverb.node.connect(Wad.reverb.gain);\n            Wad.reverb.gain.connect(destination);\n        }\n        /**************************************************************************/\n    };\n/////////////////////////////////////////////////////////////////////////////////////////\n\n\n/** Initialize and configure an oscillator node **/\n    var setUpOscillator = function(that, arg){\n        arg = arg || {};\n        that.soundSource = context.createOscillator();\n        that.soundSource.type = that.source;\n        if ( arg.pitch ) {\n            if ( arg.pitch in Wad.pitches ) {\n                that.soundSource.frequency.value = Wad.pitches[arg.pitch];\n            }\n            else {\n                that.soundSource.frequency.value = arg.pitch;\n            }\n        }\n        else {\n            that.soundSource.frequency.value = that.pitch;\n        }\n        that.soundSource.detune.value = arg.detune || that.detune;\n    };\n///////////////////////////////////////////////////\n\n/** Set the ADSR volume envelope according to play() arguments, or revert to defaults **/\n    var setUpEnvOnPlay = function(that, arg){\n        if ( arg && arg.env ) {\n            that.env.attack  = valueOrDefault(arg.env.attack, that.defaultEnv.attack);\n            that.env.decay   = valueOrDefault(arg.env.decay, that.defaultEnv.decay);\n            that.env.sustain = valueOrDefault(arg.env.sustain, that.defaultEnv.sustain);\n            that.env.hold    = valueOrDefault(arg.env.hold, that.defaultEnv.hold);\n            that.env.release = valueOrDefault(arg.env.release, that.defaultEnv.release);\n        }\n        else {\n            that.env = {\n                attack  : that.defaultEnv.attack,\n                decay   : that.defaultEnv.decay,\n                sustain : that.defaultEnv.sustain,\n                hold    : that.defaultEnv.hold,\n                release : that.defaultEnv.release\n            };\n        }\n    };\n//////////////////////////////////////////////////////////////////////////////////\n\n\n/** Set the filter and filter envelope according to play() arguments, or revert to defaults **/\n\n    var createFilters = function(that, arg){\n        if ( arg.filter && !isArray(arg.filter) ) {\n            arg.filter = [arg.filter];\n        }\n        that.filter.forEach(function (filter, i) {\n            filter.node                 = context.createBiquadFilter();\n            filter.node.type            = filter.type;\n            filter.node.frequency.value = ( arg.filter && arg.filter[i] ) ? ( arg.filter[i].frequency || filter.frequency ) : filter.frequency;\n            filter.node.Q.value         = ( arg.filter && arg.filter[i] ) ? ( arg.filter[i].q         || filter.q )         : filter.q;\n            if ( ( arg.filter && arg.filter[i].env || that.filter[i].env ) && !( that.source === \"mic\" ) ) {\n                filter.env = {\n                    attack    : ( arg.filter && arg.filter[i].env && arg.filter[i].env.attack )    || that.filter[i].env.attack,\n                    frequency : ( arg.filter && arg.filter[i].env && arg.filter[i].env.frequency ) || that.filter[i].env.frequency\n                };\n            }\n\n            that.nodes.push(filter.node);\n        })\n    };\n\n    var setUpFilterOnPlay = function(that, arg){\n        if ( arg && arg.filter && that.filter ) {\n            if ( !isArray(arg.filter) ) arg.filter = [arg.filter]\n            createFilters(that, arg)\n        }\n        else if ( that.filter ) {\n            createFilters(that, that);\n        }\n    };\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n/** Initialize and configure a convolver node for playback **/\n    var setUpReverbOnPlay = function(that, arg){\n        var reverbNode = {\n            interface : 'custom',\n            input : context.createGain(),\n            convolver : context.createConvolver(),\n            wet : context.createGain(),\n            output : context.createGain()\n        }\n        reverbNode.convolver.buffer = that.reverb.buffer;\n        reverbNode.wet.gain.value   = that.reverb.wet;\n\n        reverbNode.input.connect(reverbNode.convolver);\n        reverbNode.input.connect(reverbNode.output);\n        reverbNode.convolver.connect(reverbNode.wet);\n        reverbNode.wet.connect(reverbNode.output);\n\n        that.reverb.node = reverbNode;\n        that.nodes.push(that.reverb.node);\n    };\n//////////////////////////////////////////////////////////////\n\n\n/** Initialize and configure a panner node for playback **/\n    var setUpPanningOnPlay = function(that, arg){\n        var panning = arg && arg.panning; // can be zero provided as argument\n        if (typeof panning === 'undefined') { panning = that.panning.location; }\n\n        if (typeof panning  === 'number') {\n            that.panning.node = context.createStereoPanner();\n            that.panning.node.pan.value = panning;\n            that.panning.type = 'stereo';\n        }\n        else {\n            that.panning.node = context.createPanner();\n            that.panning.node.setPosition(panning[0], panning[1], panning[2]);\n            that.panning.node.panningModel = arg.panningModel || that.panningModel || 'equalpower';\n            that.panning.type = '3d';\n        }\n\n        that.nodes.push(that.panning.node);\n\n    };\n///////////////////////////////////////////////////////////\n\n\n/** Initialize and configure a vibrato LFO Wad for playback **/\n    var setUpVibratoOnPlay = function(that, arg){\n        that.vibrato.wad = new Wad({\n            source : that.vibrato.shape,\n            pitch  : that.vibrato.speed,\n            volume : that.vibrato.magnitude,\n            env    : {\n                attack : that.vibrato.attack\n            },\n            destination : that.soundSource.frequency\n        });\n        that.vibrato.wad.play();\n    };\n///////////////////////////////////////////////////////////////\n\n\n/** Initialize and configure a tremolo LFO Wad for playback **/\n    var setUpTremoloOnPlay = function(that, arg){\n        that.tremolo.wad = new Wad({\n            source : that.tremolo.shape,\n            pitch  : that.tremolo.speed,\n            volume : that.tremolo.magnitude,\n            env    : {\n                attack : that.tremolo.attack,\n                hold   : 10\n            },\n            destination : that.gain[0].gain\n        });\n        that.tremolo.wad.play();\n    };\n///////////////////////////////////////////////////////////////\n\n    var setUpDelayOnPlay = function(that, arg){\n        if ( that.delay ) {\n            if ( !arg.delay ) { arg.delay = {}; }\n            //create the nodes we’ll use\n            var delayNode = { // the custom delay node\n                interface    : 'custom',\n                input        : context.createGain(),\n                output       : context.createGain(),\n                delayNode    : context.createDelay(that.delay.maxDelayTime), // the native delay node inside the custom delay node.\n                feedbackNode : context.createGain(),\n                wetNode      : context.createGain(),\n            }\n\n            //set some decent values\n            delayNode.delayNode.delayTime.value = valueOrDefault(arg.delay.delayTime, that.delay.delayTime);\n            delayNode.feedbackNode.gain.value   = valueOrDefault(arg.delay.feedback, that.delay.feedback);\n            delayNode.wetNode.gain.value        = valueOrDefault(arg.delay.wet, that.delay.wet);\n\n\n            //set up the routing\n            delayNode.input.connect(delayNode.delayNode);\n            delayNode.input.connect(delayNode.output);\n            delayNode.delayNode.connect(delayNode.feedbackNode);\n            delayNode.delayNode.connect(delayNode.wetNode);\n            delayNode.feedbackNode.connect(delayNode.delayNode);\n            delayNode.wetNode.connect(delayNode.output);\n            that.delay.delayNode = delayNode;\n\n            that.nodes.push(delayNode)\n        }\n    };\n\n/** **/\n    var constructCompressor = function(that, arg){\n        that.compressor = context.createDynamicsCompressor();\n        that.compressor.attack.value    = valueOrDefault(arg.compressor.attack, that.compressor.attack.value);\n        that.compressor.knee.value      = valueOrDefault(arg.compressor.knee, that.compressor.knee.value);\n        that.compressor.ratio.value     = valueOrDefault(arg.compressor.ratio, that.compressor.ratio.value);\n        that.compressor.release.value   = valueOrDefault(arg.compressor.release, that.compressor.release.value);\n        that.compressor.threshold.value = valueOrDefault(arg.compressor.threshold, that.compressor.threshold.value);\n        that.nodes.push(that.compressor);\n    };\n    var setUpTunaOnPlay = function(that, arg){\n        if ( !( that.tuna || arg.tuna ) ) { return }\n        var tunaConfig = {}\n        if ( that.tuna ) {\n            for ( var key in that.tuna ) {\n                tunaConfig[key] = that.tuna[key]\n            }\n        }\n\n        // overwrite settings from `this` with settings from arg\n        if ( arg.tuna ) {\n            for ( var key in arg.tuna ) {\n                tunaConfig[key] = arg.tuna[key]\n            }\n        }\n        console.log('tunaconfig: ', tunaConfig)\n        for ( var key in tunaConfig) {\n            console.log(key)\n            var tunaEffect = new Wad.tuna[key](tunaConfig[key])\n            that.nodes.push(tunaEffect)\n        }\n        // console.log(that.nodes)\n    }\n///\n\n/** Method to allow users to setup external fx in the constructor **/\n    Wad.prototype.constructExternalFx = function(arg, context){\n        //override me in your own code\n    };\n\n\n//////////////////////////////////////////////////////////////////////////////\n\n/** To be overrided by the user **/\n    Wad.prototype.setUpExternalFxOnPlay = function(arg, context){\n        //user does what is necessary here, and then maybe does something like:\n        // this.nodes.push(externalFX)\n    };\n///////////////////////////////////////////////////////////////\n\n\n/** the play() method will create the various nodes that are required for this Wad to play,\nset properties on those nodes according to the constructor arguments and play() arguments,\nplug the nodes into each other with plugEmIn(),\nthen finally play the sound by calling playEnv() **/\n    Wad.prototype.play = function(arg){\n        arg = arg || { arg : null };\n        if ( this.playable < 1 ) {\n            this.playOnLoad    = true;\n            this.playOnLoadArg = arg;\n        }\n\n        else if ( this.source === 'mic' ) {\n            if ( Wad.micConsent ) {\n                if ( arg.arg === null ) {\n                    plugEmIn(this, arg);\n                }\n                else {\n                    constructFilter(this, arg);\n                    constructVibrato(this, arg);\n                    constructTremolo(this, arg);\n                    constructReverb(this, arg);\n                    this.constructExternalFx(arg, context);\n                    constructPanning(this, arg);\n                    constructDelay(this, arg);\n                    setUpMic(this, arg);\n                    plugEmIn(this, arg);\n                }\n            }\n            else { console.log('You have not given your browser permission to use your microphone.')}\n        }\n\n        else {\n            this.nodes = [];\n            if ( !arg.wait ) { arg.wait = 0; }\n            if ( arg.volume ) { this.volume = arg.volume; }\n            else { this.volume = this.defaultVolume; }\n\n            if ( this.source in { 'sine' : 0, 'sawtooth' : 0, 'square' : 0, 'triangle' : 0 } ) {\n                setUpOscillator(this, arg);\n            }\n\n            else {\n                this.soundSource = context.createBufferSource();\n                this.soundSource.buffer = this.decodedBuffer;\n                if ( this.source === 'noise' || this.loop || arg.loop ) {\n                    this.soundSource.loop = true;\n                }\n            }\n\n            if (arg.exactTime === undefined) {\n                arg.exactTime = context.currentTime + arg.wait;\n            }\n\n            this.nodes.push(this.soundSource);\n\n\n    /**  sets the volume envelope based on the play() arguments if present,\n    or defaults to the constructor arguments if the volume envelope is not set on play() **/\n            setUpEnvOnPlay(this, arg);\n    ////////////////////////////////////////////////////////////////////////////////////////\n\n\n    /**  sets up the filter and filter envelope based on the play() argument if present,\n    or defaults to the constructor argument if the filter and filter envelope are not set on play() **/\n            setUpFilterOnPlay(this, arg);\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n            setUpTunaOnPlay(this, arg);\n\n            this.setUpExternalFxOnPlay(arg, context);\n\n\n            this.gain.unshift(context.createGain()); // sets up the gain node\n            this.gain[0].label = arg.label;\n            this.nodes.push(this.gain[0]);\n\n            if ( this.gain.length > 15 ) {\n                this.gain.length = 15\n            }\n\n            // sets up reverb\n            if ( this.reverb ) { setUpReverbOnPlay(this, arg); }\n\n    /**  sets panning based on the play() argument if present, or defaults to the constructor argument if panning is not set on play **/\n            setUpPanningOnPlay(this, arg);\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n            setUpDelayOnPlay(this, arg);\n\n            plugEmIn(this, arg);\n\n            if ( this.filter && this.filter[0].env ) { filterEnv(this, arg); }\n            playEnv(this, arg);\n\n            //sets up vibrato LFO\n            if ( this.vibrato ) { setUpVibratoOnPlay(this, arg); }\n\n            //sets up tremolo LFO\n            if ( this.tremolo ) { setUpTremoloOnPlay(this, arg); }\n        }\n        if ( arg.callback ) { arg.callback(this); }\n        return this;\n    };\n\n//////////////////////////////////////////////////////////////////////////////////////////\n\n\n    /** Change the volume of a Wad at any time, including during playback **/\n    Wad.prototype.setVolume = function(volume){\n        this.defaultVolume = volume;\n        if ( this.gain.length > 0 ) { this.gain[0].gain.value = volume; }\n        return this;\n    };\n\n    /**\n    Change the playback speed of a Wad during playback.\n    inputSpeed is a value of 0 < speed, and is the rate of playback of the audio.\n    E.g. if input speed = 2.0, the playback will be twice as fast\n    **/\n    Wad.prototype.setSpeed = function(inputSpeed) {\n\n        //Check/Save the input\n        var speed;\n        if(inputSpeed && inputSpeed > 0) speed = inputSpeed;\n        else speed = 0;\n\n        //Check if we have a soundsource (Though we always should)\n        if(this.soundSource) {\n\n            //Set the value\n            this.soundSource.playbackRate.value = speed;\n        }\n        else {\n\n            //Inform that there is no delay on the current wad\n            console.log(\"Sorry, but the wad does not contain a soundSource!\");\n        }\n\n        return this;\n    };\n\n    Wad.prototype.setDetune = function(detune){\n        this.soundSource.detune.value = detune;\n        return this;\n    };\n\n    /** Change the panning of a Wad at any time, including during playback **/\n    Wad.prototype.setPanning = function(panning){\n        this.panning.location = panning;\n        if ( isArray(panning) && this.panning.type === '3d' && this.panning.node ) {\n            this.panning.node.setPosition(panning[0], panning[1], panning[2]);\n\n        }\n        else if ( typeof panning === 'number' && this.panning.type === 'stereo' && this.panning.node) {\n            this.panning.node.pan.value = panning;\n        }\n\n        if ( isArray(panning) ) { this.panning.type = '3d' }\n        else if ( typeof panning === 'number' ) { this.panning.type = 'stereo' }\n        return this;\n    };\n\n    /**\n    Change the Reverb of a Wad at any time, including during playback.\n    inputWet is a value of 0 < wetness/gain < 1\n    **/\n    Wad.prototype.setReverb = function(inputWet) {\n\n        //Check/Save the input\n\n        var wet;\n        if(inputWet && inputWet > 0 && inputWet < 1) wet = inputWet;\n        else if(inputWet >= 1) wet = 1;\n        else wet = 0;\n\n        //Check if we have delay\n        if(this.reverb) {\n\n            //Set the value\n            this.reverb.wet = wet;\n\n            //Set the node's value, if it exists\n            if(this.reverb.node) {\n\n                this.reverb.node.wet.gain.value = wet;\n            }\n        }\n        else {\n\n            //Inform that there is no reverb on the current wad\n            console.log(\"Sorry, but the wad does not contain Reverb!\");\n        }\n\n        return this;\n    };\n\n\n    /**\n    Change the Delay of a Wad at any time, including during playback.\n    inputTime is a value of time > 0, and is the time in seconds between each delayed playback.\n    inputWet is a value of gain 0 < inputWet < 1, and is Relative volume change between the original sound and the first delayed playback.\n    inputFeedback is a value of gain 0 < inputFeedback < 1, and is Relative volume change between each delayed playback and the next.\n    **/\n    Wad.prototype.setDelay = function(inputTime, inputWet, inputFeedback){\n\n        //Check/Save the input\n        var time;\n        if(inputTime && inputTime > 0) time = inputTime;\n        else time = 0;\n\n        var wet;\n        if(inputWet && inputWet > 0 && inputWet < 1) wet = inputWet;\n        else if(inputWet >= 1) wet = 1;\n        else wet = 0;\n\n        var feedback;\n        if(inputFeedback && inputFeedback > 0 && inputFeedback < 1) feedback = inputFeedback;\n        else if(inputFeedback >= 1) feedback = 1;\n        else feedback = 0;\n\n        //Check if we have delay\n        if(this.delay) {\n\n            //Set the value\n            this.delay.delayTime = time;\n            this.delay.wet = wet;\n            this.delay.feedback = feedback;\n\n            //Set the node's value, if it exists\n            if(this.delay.delayNode) {\n\n                this.delay.delayNode.delayNode.delayTime.value = time;\n                this.delay.delayNode.wetNode.gain.value = wet;\n                this.delay.delayNode.feedbackNode.gain.value = feedback;\n            }\n        }\n        else {\n\n            //Inform that there is no delay on the current wad\n            console.log(\"Sorry, but the wad does not contain delay!\");\n        }\n\n        return this;\n    };\n\n\n//////////////////////////////////////////////////////////////////////////////////////////\n\n\n/** If multiple instances of a sound are playing simultaneously, stop() only can stop the most recent one **/\n    Wad.prototype.stop = function(label){\n        if ( !( this.source === 'mic' ) ) {\n            if ( label ) {\n                for ( var i = 0; i < this.gain.length; i++ ) {\n                    if ( this.gain[i].label === label ) {\n                        this.gain[i].gain.cancelScheduledValues(context.currentTime);\n                        this.gain[i].gain.setValueAtTime(this.gain[i].gain.value, context.currentTime);\n                        this.gain[i].gain.linearRampToValueAtTime(.0001, context.currentTime + this.env.release);\n                    }\n                }\n            }\n            if ( !label ) {\n                this.gain[0].gain.cancelScheduledValues(context.currentTime);\n                this.gain[0].gain.setValueAtTime(this.gain[0].gain.value, context.currentTime);\n                this.gain[0].gain.linearRampToValueAtTime(.0001, context.currentTime + this.env.release);\n            }\n        }\n        else if (Wad.micConsent ) {\n            this.mediaStreamSource.disconnect(0);\n        }\n        else { console.log('You have not given your browser permission to use your microphone.')}\n        if ( this.tremolo ) {\n            this.tremolo.wad.stop()\n        }\n    };\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n    var buflen = 2048;\n    var buf = new Uint8Array( buflen );\n    var MINVAL = 134;  // 128 == zero.  MINVAL is the \"minimum detected signal\" level.\n\n    var noteFromPitch = function( frequency ) {\n        var noteNum = 12 * (Math.log( frequency / 440 )/Math.log(2) );\n        return Math.round( noteNum ) + 69;\n    }\n\n    var frequencyFromNoteNumber = function( note ) {\n        return 440 * Math.pow(2,(note-69)/12);\n    }\n\n    var centsOffFromPitch = function( frequency, note ) {\n        return Math.floor( 1200 * Math.log( frequency / frequencyFromNoteNumber( note ))/Math.log(2) );\n    }\n\n\n    function autoCorrelate( buf, sampleRate ) {\n        var MIN_SAMPLES = 4;    // corresponds to an 11kHz signal\n        var MAX_SAMPLES = 1000; // corresponds to a 44Hz signal\n        var SIZE = 1000;\n        var best_offset = -1;\n        var best_correlation = 0;\n        var rms = 0;\n        var foundGoodCorrelation = false;\n\n        if (buf.length < (SIZE + MAX_SAMPLES - MIN_SAMPLES))\n            return -1;  // Not enough data\n\n        for ( var i = 0; i < SIZE; i++ ) {\n            var val = ( buf[i] - 128 ) / 128;\n            rms += val * val;\n        }\n        rms = Math.sqrt(rms/SIZE);\n        if (rms<0.01)\n            return -1;\n\n        var lastCorrelation=1;\n        for (var offset = MIN_SAMPLES; offset <= MAX_SAMPLES; offset++) {\n            var correlation = 0;\n\n            for (var i=0; i<SIZE; i++) {\n                correlation += Math.abs(((buf[i] - 128)/128)-((buf[i+offset] - 128)/128));\n            }\n            correlation = 1 - (correlation/SIZE);\n            if ((correlation>0.9) && (correlation > lastCorrelation))\n                foundGoodCorrelation = true;\n            else if (foundGoodCorrelation) {\n                // short-circuit - we found a good correlation, then a bad one, so we'd just be seeing copies from here.\n                return sampleRate/best_offset;\n            }\n            lastCorrelation = correlation;\n            if (correlation > best_correlation) {\n                best_correlation = correlation;\n                best_offset = offset;\n            }\n        }\n        if (best_correlation > 0.01) {\n            // console.log(\"f = \" + sampleRate/best_offset + \"Hz (rms: \" + rms + \" confidence: \" + best_correlation + \")\")\n            return sampleRate/best_offset;\n        }\n        return -1;\n    //  var best_frequency = sampleRate/best_offset;\n    }\n\n\n    Wad.Poly = function(arg){\n        if ( !arg ) { arg = {}; }\n        this.isSetUp  = false;\n        this.playable = 1;\n\n        if ( arg.reverb ) {\n            constructReverb(this, arg); // We need to make sure we have downloaded the impulse response before continuing with the setup.\n        }\n        else {\n            this.setUp(arg);\n        }\n    };\n\n    Wad.Poly.prototype.setUp = function(arg){ // Anything that needs to happen before reverb is set up can go here.\n        this.wads              = [];\n        this.input             = context.createAnalyser();\n        this.input.fftSize     = 2048\n        this.nodes             = [this.input];\n        this.destination       = arg.destination || context.destination; // the last node the sound is routed to\n        this.volume            = arg.volume || 1;\n        this.output            = context.createGain();\n        this.output.gain.value = this.volume;\n        this.tuna              = arg.tuna || null;\n\n        if ( !( typeof Recorder === 'undefined' ) && arg.recConfig ) { // Recorder should be defined, unless you're running the unconcatenated source version and forgot to include recorder.js.\n            this.rec               = new Recorder(this.output, arg.recConfig);\n            this.rec.recordings    = [];\n\n            var that = this;\n            var getRecorderBufferCallback = function( buffers ) {\n                that.rec.createWadArg.source = buffers;\n                that.rec.recordings.unshift(new Wad(that.rec.createWadArg));\n            };\n            this.rec.createWad = function(arg){\n                this.createWadArg = arg || { env : { hold : 9001 } };\n                this.getBuffer(getRecorderBufferCallback);\n            };\n        }\n\n        this.globalReverb = arg.globalReverb || false; // deprecated\n\n        constructFilter(this, arg);\n        if ( this.filter ) { createFilters(this, arg); }\n\n        if ( this.reverb ) { setUpReverbOnPlay(this, arg); }\n\n        this.constructExternalFx(arg, context);\n\n        constructPanning(this, arg);\n        setUpPanningOnPlay(this, arg);\n        if ( arg.compressor ) { constructCompressor(this, arg); }\n\n        constructDelay(this, arg);\n        setUpDelayOnPlay(this, arg);\n        setUpTunaOnPlay(this, arg);\n        this.nodes.push(this.output);\n        plugEmIn(this, arg);\n        this.isSetUp = true;\n        if ( arg.callback ) { arg.callback(this); }\n    }\n\n/**\n    The MIT License (MIT)\n\nCopyright (c) 2014 Chris Wilson\n**/\n    Wad.Poly.prototype.updatePitch = function( time ) {\n        this.input.getByteTimeDomainData( buf );\n        var ac = autoCorrelate( buf, context.sampleRate );\n\n        if ( ac !== -1 && ac !== 11025 && ac !== 12000 ) {\n            var pitch = ac;\n            this.pitch = Math.floor( pitch ) ;\n            var note = noteFromPitch( pitch );\n            this.noteName = Wad.pitchesArray[note - 12];\n            // Detune doesn't seem to work.\n            // var detune = centsOffFromPitch( pitch, note );\n            // if (detune == 0 ) {\n            //     this.detuneEstimate = 0;\n            // } else {\n\n            //     this.detuneEstimate = detune\n            // }\n        }\n        var that = this;\n        that.rafID = window.requestAnimationFrame( function(){ that.updatePitch() } );\n    }\n\n    Wad.Poly.prototype.stopUpdatingPitch = function(){\n        cancelAnimationFrame(this.rafID)\n    }\n\n    Wad.Poly.prototype.setVolume = function(volume){\n        if ( this.isSetUp ) {\n            this.output.gain.value = volume;\n        }\n        else {\n            console.log('This PolyWad is not set up yet.');\n        }\n        return this;\n    }\n\n    Wad.Poly.prototype.play = function(arg){\n        if ( this.isSetUp ) {\n            if ( this.playable < 1 ) {\n                this.playOnLoad    = true;\n                this.playOnLoadArg = arg;\n            }\n            else {\n                if ( arg && arg.volume ) {\n                    this.output.gain.value = arg.volume; // if two notes are played with volume set as a play arg, does the second one overwrite the first? maybe input should be an array of gain nodes, like regular wads.\n                    arg.volume = undefined; // if volume is set, it should change the gain on the polywad's gain node, NOT the gain nodes for individual wads inside the polywad.\n                }\n                for ( var i = 0; i < this.wads.length; i++ ) {\n                    this.wads[i].play(arg);\n                }\n            }\n        }\n        else {\n            console.log('This PolyWad is not set up yet.');\n        }\n        return this;\n    };\n\n    Wad.Poly.prototype.stop = function(arg){\n        if ( this.isSetUp ) {\n            for ( var i = 0; i < this.wads.length; i++ ) {\n                this.wads[i].stop(arg);\n            }\n        }\n    };\n\n    Wad.Poly.prototype.add = function(wad){\n        if ( this.isSetUp ) {\n            wad.destination = this.input;\n            this.wads.push(wad);\n            if ( wad instanceof Wad.Poly ) {\n                wad.output.disconnect(0);\n                wad.output.connect(this.input);\n            }\n        }\n        else {\n            console.log('This PolyWad is not set up yet.');\n        }\n        return this;\n    };\n\n\n\n    Wad.Poly.prototype.remove = function(wad){\n        if ( this.isSetUp ) {\n            for ( var i = 0; i < this.wads.length; i++ ) {\n                if ( this.wads[i] === wad ) {\n                    this.wads[i].destination = context.destination;\n                    this.wads.splice(i,1);\n                    if ( wad instanceof Wad.Poly ) {\n                        wad.output.disconnect(0);\n                        wad.output.connect(context.destination);\n                    }\n                }\n            }\n        }\n        return this;\n    };\n\n    Wad.Poly.prototype.constructExternalFx = function(arg, context){\n\n    };\n\n/** If a Wad is created with reverb without specifying a URL for the impulse response,\ngrab it from the defaultImpulse URL **/\n    Wad.defaultImpulse = 'http://www.codecur.io/us/sendaudio/widehall.wav';\n\n    // This method is deprecated.\n    Wad.setGlobalReverb = function(arg){\n        Wad.reverb                 = {};\n        Wad.reverb.node            = context.createConvolver();\n        Wad.reverb.gain            = context.createGain();\n        Wad.reverb.gain.gain.value = arg.wet;\n        var impulseURL             = arg.impulse || Wad.defaultImpulse;\n        var request                = new XMLHttpRequest();\n        request.open(\"GET\", impulseURL, true);\n        request.responseType = \"arraybuffer\";\n\n        request.onload = function() {\n            context.decodeAudioData(request.response, function (decodedBuffer){\n                Wad.reverb.node.buffer = decodedBuffer;\n            });\n        };\n        request.send();\n\n    };\n//////////////////////////////////////////////////////////////////////////////////////\n//  Utility function to avoid javascript type conversion bug checking zero values   //\n\n    var valueOrDefault = function(value, def) {\n        var val = (value == null) ? def : value;\n        return val;\n    };\n\n//////////////////////////////////////////////////////////////////////////////////////\n/** This object is a mapping of note names to frequencies. **/\n    Wad.pitches = {\n        'A0'  : 27.5000,\n        'A#0' : 29.1352,\n        'Bb0' : 29.1352,\n        'B0'  : 30.8677,\n        'B#0'  : 32.7032,\n        'Cb1'  : 30.8677,\n        'C1'  : 32.7032,\n        'C#1' : 34.6478,\n        'Db1' : 34.6478,\n        'D1'  : 36.7081,\n        'D#1' : 38.8909,\n        'Eb1' : 38.8909,\n        'E1'  : 41.2034,\n        'Fb1'  : 41.2034,\n        'E#1'  : 43.6535,\n        'F1'  : 43.6535,\n        'F#1' : 46.2493,\n        'Gb1' : 46.2493,\n        'G1'  : 48.9994,\n        'G#1' : 51.9131,\n        'Ab1' : 51.9131,\n        'A1'  : 55.0000,\n        'A#1' : 58.2705,\n        'Bb1' : 58.2705,\n        'B1'  : 61.7354,\n        'Cb2'  : 61.7354,\n        'B#1'  : 65.4064,\n        'C2'  : 65.4064,\n        'C#2' : 69.2957,\n        'Db2' : 69.2957,\n        'D2'  : 73.4162,\n        'D#2' : 77.7817,\n        'Eb2' : 77.7817,\n        'E2'  : 82.4069,\n        'Fb2'  : 82.4069,\n        'E#2'  : 87.3071,\n        'F2'  : 87.3071,\n        'F#2' : 92.4986,\n        'Gb2' : 92.4986,\n        'G2'  : 97.9989,\n        'G#2' : 103.826,\n        'Ab2' : 103.826,\n        'A2'  : 110.000,\n        'A#2' : 116.541,\n        'Bb2' : 116.541,\n        'B2'  : 123.471,\n        'Cb3'  : 123.471,\n        'B#2'  : 130.813,\n        'C3'  : 130.813,\n        'C#3' : 138.591,\n        'Db3' : 138.591,\n        'D3'  : 146.832,\n        'D#3' : 155.563,\n        'Eb3' : 155.563,\n        'E3'  : 164.814,\n        'Fb3'  : 164.814,\n        'E#3'  : 174.614,\n        'F3'  : 174.614,\n        'F#3' : 184.997,\n        'Gb3' : 184.997,\n        'G3'  : 195.998,\n        'G#3' : 207.652,\n        'Ab3' : 207.652,\n        'A3'  : 220.000,\n        'A#3' : 233.082,\n        'Bb3' : 233.082,\n        'B3'  : 246.942,\n        'Cb4'  : 246.942,\n        'B#3'  : 261.626,\n        'C4'  : 261.626,\n        'C#4' : 277.183,\n        'Db4' : 277.183,\n        'D4'  : 293.665,\n        'D#4' : 311.127,\n        'Eb4' : 311.127,\n        'E4'  : 329.628,\n        'Fb4'  : 329.628,\n        'E#4'  : 349.228,\n        'F4'  : 349.228,\n        'F#4' : 369.994,\n        'Gb4' : 369.994,\n        'G4'  : 391.995,\n        'G#4' : 415.305,\n        'Ab4' : 415.305,\n        'A4'  : 440.000,\n        'A#4' : 466.164,\n        'Bb4' : 466.164,\n        'B4'  : 493.883,\n        'Cb5'  : 493.883,\n        'B#4'  : 523.251,\n        'C5'  : 523.251,\n        'C#5' : 554.365,\n        'Db5' : 554.365,\n        'D5'  : 587.330,\n        'D#5' : 622.254,\n        'Eb5' : 622.254,\n        'E5'  : 659.255,\n        'Fb5'  : 659.255,\n        'E#5'  : 698.456,\n        'F5'  : 698.456,\n        'F#5' : 739.989,\n        'Gb5' : 739.989,\n        'G5'  : 783.991,\n        'G#5' : 830.609,\n        'Ab5' : 830.609,\n        'A5'  : 880.000,\n        'A#5' : 932.328,\n        'Bb5' : 932.328,\n        'B5'  : 987.767,\n        'Cb6'  : 987.767,\n        'B#5'  : 1046.50,\n        'C6'  : 1046.50,\n        'C#6' : 1108.73,\n        'Db6' : 1108.73,\n        'D6'  : 1174.66,\n        'D#6' : 1244.51,\n        'Eb6' : 1244.51,\n        'Fb6'  : 1318.51,\n        'E6'  : 1318.51,\n        'E#6'  : 1396.91,\n        'F6'  : 1396.91,\n        'F#6' : 1479.98,\n        'Gb6' : 1479.98,\n        'G6'  : 1567.98,\n        'G#6' : 1661.22,\n        'Ab6' : 1661.22,\n        'A6'  : 1760.00,\n        'A#6' : 1864.66,\n        'Bb6' : 1864.66,\n        'B6'  : 1975.53,\n        'Cb7'  : 1975.53,\n        'B#6'  : 2093.00,\n        'C7'  : 2093.00,\n        'C#7' : 2217.46,\n        'Db7' : 2217.46,\n        'D7'  : 2349.32,\n        'D#7' : 2489.02,\n        'Eb7' : 2489.02,\n        'E7'  : 2637.02,\n        'Fb7'  : 2637.02,\n        'E#7'  : 2793.83,\n        'F7'  : 2793.83,\n        'F#7' : 2959.96,\n        'Gb7' : 2959.96,\n        'G7'  : 3135.96,\n        'G#7' : 3322.44,\n        'Ab7' : 3322.44,\n        'A7'  : 3520.00,\n        'A#7' : 3729.31,\n        'Bb7' : 3729.31,\n        'B7'  : 3951.07,\n        'Cb8' : 3951.07,\n        'B#7'  : 4186.01,\n        'C8'  : 4186.01\n    };\n\n\n    Wad.pitchesArray = [ // Just an array of note names. This can be useful for mapping MIDI data to notes.\n        'C0',\n        'C#0',\n        'D0',\n        'D#0',\n        'E0',\n        'F0',\n        'F#0',\n        'G0',\n        'G#0',\n        'A0',\n        'A#0',\n        'B0',\n        'C1',\n        'C#1',\n        'D1',\n        'D#1',\n        'E1',\n        'F1',\n        'F#1',\n        'G1',\n        'G#1',\n        'A1',\n        'A#1',\n        'B1',\n        'C2',\n        'C#2',\n        'D2',\n        'D#2',\n        'E2',\n        'F2',\n        'F#2',\n        'G2',\n        'G#2',\n        'A2',\n        'A#2',\n        'B2',\n        'C3',\n        'C#3',\n        'D3',\n        'D#3',\n        'E3',\n        'F3',\n        'F#3',\n        'G3',\n        'G#3',\n        'A3',\n        'A#3',\n        'B3',\n        'C4',\n        'C#4',\n        'D4',\n        'D#4',\n        'E4',\n        'F4',\n        'F#4',\n        'G4',\n        'G#4',\n        'A4',\n        'A#4',\n        'B4',\n        'C5',\n        'C#5',\n        'D5',\n        'D#5',\n        'E5',\n        'F5',\n        'F#5',\n        'G5',\n        'G#5',\n        'A5',\n        'A#5',\n        'B5',\n        'C6',\n        'C#6',\n        'D6',\n        'D#6',\n        'E6',\n        'F6',\n        'F#6',\n        'G6',\n        'G#6',\n        'A6',\n        'A#6',\n        'B6',\n        'C7',\n        'C#7',\n        'D7',\n        'D#7',\n        'E7',\n        'F7',\n        'F#7',\n        'G7',\n        'G#7',\n        'A7',\n        'A#7',\n        'B7',\n        'C8'\n    ];\n//////////////////////////////////////////////////////////////\n\n    Wad.midiInstrument = {\n        play : function() { console.log('playing midi')  },\n        stop : function() { console.log('stopping midi') }\n    };\n    Wad.midiInputs  = [];\n\n    midiMap = function(event){\n        console.log(event.receivedTime, event.data);\n        if ( event.data[0] === 144 ) { // 144 means the midi message has note data\n            // console.log('note')\n            if ( event.data[2] === 0 ) { // noteOn velocity of 0 means this is actually a noteOff message\n                console.log('|| stopping note: ', Wad.pitchesArray[event.data[1]-12]);\n                Wad.midiInstrument.stop(Wad.pitchesArray[event.data[1]-12]);\n            }\n            else if ( event.data[2] > 0 ) {\n                console.log('> playing note: ', Wad.pitchesArray[event.data[1]-12]);\n                Wad.midiInstrument.play({pitch : Wad.pitchesArray[event.data[1]-12], label : Wad.pitchesArray[event.data[1]-12], callback : function(that){\n                }})\n            }\n        }\n        else if ( event.data[0] === 176 ) { // 176 means the midi message has controller data\n            console.log('controller');\n            if ( event.data[1] == 46 ) {\n                if ( event.data[2] == 127 ) { Wad.midiInstrument.pedalMod = true; }\n                else if ( event.data[2] == 0 ) { Wad.midiInstrument.pedalMod = false; }\n            }\n        }\n        else if ( event.data[0] === 224 ) { // 224 means the midi message has pitch bend data\n            console.log('pitch bend');\n        }\n    };\n\n\n    var onSuccessCallback = function(midiAccess){\n        // console.log('inputs: ', m.inputs)\n\n        Wad.midiInputs = []\n        var val = midiAccess.inputs.values();\n        for ( var o = val.next(); !o.done; o = val.next() ) {\n            Wad.midiInputs.push(o.value)\n        }\n        // Wad.midiInputs = [m.inputs.values().next().value];   // inputs = array of MIDIPorts\n        console.log('MIDI inputs: ', Wad.midiInputs)\n        // var outputs = m.outputs(); // outputs = array of MIDIPorts\n        for ( var i = 0; i < Wad.midiInputs.length; i++ ) {\n            Wad.midiInputs[i].onmidimessage = midiMap; // onmidimessage( event ), event.data & event.receivedTime are populated\n        }\n        // var o = m.outputs()[0];           // grab first output device\n        // o.send( [ 0x90, 0x45, 0x7f ] );     // full velocity note on A4 on channel zero\n        // o.send( [ 0x80, 0x45, 0x7f ], window.performance.now() + 1000 );  // full velocity A4 note off in one second.\n    };\n    var onErrorCallback = function(err){\n        console.log(\"uh-oh! Something went wrong!  Error code: \" + err.code );\n    };\n\n    if ( navigator && navigator.requestMIDIAccess ) {\n        try {\n            navigator.requestMIDIAccess().then(onSuccessCallback, onErrorCallback);\n        }\n        catch(err) {\n            var text = \"There was an error on this page.\\n\\n\";\n            text += \"Error description: \" + err.message + \"\\n\\n\";\n            text += \"Click OK to continue.\\n\\n\";\n            console.log(text);\n        }\n    }\n\n\n    Wad.presets = {\n        hiHatClosed : { source : 'noise', env : { attack : .001, decay : .008, sustain : .2, hold : .03, release : .01}, filter : { type : 'highpass', frequency : 400, q : 1 } },\n        snare : { source : 'noise', env : {attack : .001, decay : .01, sustain : .2, hold : .03, release : .02}, filter : {type : 'bandpass', frequency : 300, q : .180 } },\n        hiHatOpen : { source : 'noise', env : { attack : .001, decay : .008, sustain : .2, hold : .43, release : .01}, filter : { type : 'highpass', frequency : 100, q : .2 } },\n        ghost : { source : 'square', volume : .3, env : { attack : .01, decay : .002, sustain : .5, hold : 2.5, release : .3 }, filter : { type : 'lowpass', frequency : 600, q : 7, env : { attack : .7, frequency : 1600 } }, vibrato : { attack : 8, speed : 8, magnitude : 100 } },\n        piano : { source : 'square', volume : 1.4, env : { attack : .01, decay : .005, sustain : .2, hold : .015, release : .3 }, filter : { type : 'lowpass', frequency : 1200, q : 8.5, env : { attack : .2, frequency : 600 } } }\n    };\n    return Wad;\n\n})()\n\nif(typeof module !== 'undefined' && module.exports) {\n    module.exports = Wad;\n}\n\nreturn Wad;\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/web-audio-daw/build/wad.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}